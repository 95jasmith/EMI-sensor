
EMI_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00019734  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c898  0801c898  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c898  0801c898  0002c898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c8a0  0801c8a0  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c8a0  0801c8a0  0002c8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c8a4  0801c8a4  0002c8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0801c8a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  0801c8b4  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  0801c8b4  00030188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c07e  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a2c  00000000  00000000  0003c0ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  0003dae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c88  00000000  00000000  0003e848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f487  00000000  00000000  0003f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009540  00000000  00000000  0005e957  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1368  00000000  00000000  00067e97  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001291ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038ac  00000000  00000000  0012927c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800314c 	.word	0x0800314c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800314c 	.word	0x0800314c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <HAL_Init+0x40>)
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <HAL_Init+0x40>)
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <HAL_Init+0x40>)
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f92f 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f002 fbbc 	bl	8002cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f939 	bl	80007ee <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f90f 	bl	80007b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	2000002c 	.word	0x2000002c

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	2000002c 	.word	0x2000002c

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff ffee 	bl	80005e0 <HAL_GetTick>
 8000604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000610:	d005      	beq.n	800061e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_Delay+0x40>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061e:	bf00      	nop
 8000620:	f7ff ffde 	bl	80005e0 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	429a      	cmp	r2, r3
 800062e:	d8f7      	bhi.n	8000620 <HAL_Delay+0x28>
  {
  }
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000004 	.word	0x20000004

0800063c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <__NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f7ff ff8e 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff47 	bl	800063c <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff5c 	bl	8000684 <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff8e 	bl	80006f4 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5d 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffb0 	bl	800075c <SysTick_Config>
 80007fc:	4603      	mov	r3, r0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000808:	b480      	push	{r7}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
 8000822:	e165      	b.n	8000af0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000824:	2201      	movs	r2, #1
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	697a      	ldr	r2, [r7, #20]
 8000834:	4013      	ands	r3, r2
 8000836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	429a      	cmp	r2, r3
 800083e:	f040 8154 	bne.w	8000aea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d003      	beq.n	8000852 <HAL_GPIO_Init+0x4a>
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b12      	cmp	r3, #18
 8000850:	d123      	bne.n	800089a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	08da      	lsrs	r2, r3, #3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3208      	adds	r2, #8
 800085a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800085e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	220f      	movs	r2, #15
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4013      	ands	r3, r2
 8000874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	691a      	ldr	r2, [r3, #16]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	f003 0307 	and.w	r3, r3, #7
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	4313      	orrs	r3, r2
 800088a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	08da      	lsrs	r2, r3, #3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3208      	adds	r2, #8
 8000894:	69b9      	ldr	r1, [r7, #24]
 8000896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	2203      	movs	r2, #3
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	4013      	ands	r3, r2
 80008b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f003 0203 	and.w	r2, r3, #3
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	69ba      	ldr	r2, [r7, #24]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d00b      	beq.n	80008ee <HAL_GPIO_Init+0xe6>
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d007      	beq.n	80008ee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e2:	2b11      	cmp	r3, #17
 80008e4:	d003      	beq.n	80008ee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b12      	cmp	r3, #18
 80008ec:	d130      	bne.n	8000950 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2203      	movs	r2, #3
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4013      	ands	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4313      	orrs	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000924:	2201      	movs	r2, #1
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4013      	ands	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	091b      	lsrs	r3, r3, #4
 800093a:	f003 0201 	and.w	r2, r3, #1
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4313      	orrs	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2203      	movs	r2, #3
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	4313      	orrs	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000988:	2b00      	cmp	r3, #0
 800098a:	f000 80ae 	beq.w	8000aea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b5c      	ldr	r3, [pc, #368]	; (8000b04 <HAL_GPIO_Init+0x2fc>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a5b      	ldr	r2, [pc, #364]	; (8000b04 <HAL_GPIO_Init+0x2fc>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b59      	ldr	r3, [pc, #356]	; (8000b04 <HAL_GPIO_Init+0x2fc>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009aa:	4a57      	ldr	r2, [pc, #348]	; (8000b08 <HAL_GPIO_Init+0x300>)
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	3302      	adds	r3, #2
 80009b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f003 0303 	and.w	r3, r3, #3
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	220f      	movs	r2, #15
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a4e      	ldr	r2, [pc, #312]	; (8000b0c <HAL_GPIO_Init+0x304>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d025      	beq.n	8000a22 <HAL_GPIO_Init+0x21a>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4d      	ldr	r2, [pc, #308]	; (8000b10 <HAL_GPIO_Init+0x308>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d01f      	beq.n	8000a1e <HAL_GPIO_Init+0x216>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4c      	ldr	r2, [pc, #304]	; (8000b14 <HAL_GPIO_Init+0x30c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d019      	beq.n	8000a1a <HAL_GPIO_Init+0x212>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a4b      	ldr	r2, [pc, #300]	; (8000b18 <HAL_GPIO_Init+0x310>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d013      	beq.n	8000a16 <HAL_GPIO_Init+0x20e>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4a      	ldr	r2, [pc, #296]	; (8000b1c <HAL_GPIO_Init+0x314>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00d      	beq.n	8000a12 <HAL_GPIO_Init+0x20a>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a49      	ldr	r2, [pc, #292]	; (8000b20 <HAL_GPIO_Init+0x318>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d007      	beq.n	8000a0e <HAL_GPIO_Init+0x206>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a48      	ldr	r2, [pc, #288]	; (8000b24 <HAL_GPIO_Init+0x31c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d101      	bne.n	8000a0a <HAL_GPIO_Init+0x202>
 8000a06:	2306      	movs	r3, #6
 8000a08:	e00c      	b.n	8000a24 <HAL_GPIO_Init+0x21c>
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	e00a      	b.n	8000a24 <HAL_GPIO_Init+0x21c>
 8000a0e:	2305      	movs	r3, #5
 8000a10:	e008      	b.n	8000a24 <HAL_GPIO_Init+0x21c>
 8000a12:	2304      	movs	r3, #4
 8000a14:	e006      	b.n	8000a24 <HAL_GPIO_Init+0x21c>
 8000a16:	2303      	movs	r3, #3
 8000a18:	e004      	b.n	8000a24 <HAL_GPIO_Init+0x21c>
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	e002      	b.n	8000a24 <HAL_GPIO_Init+0x21c>
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e000      	b.n	8000a24 <HAL_GPIO_Init+0x21c>
 8000a22:	2300      	movs	r3, #0
 8000a24:	69fa      	ldr	r2, [r7, #28]
 8000a26:	f002 0203 	and.w	r2, r2, #3
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	4093      	lsls	r3, r2
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a34:	4934      	ldr	r1, [pc, #208]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	089b      	lsrs	r3, r3, #2
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a42:	4b39      	ldr	r3, [pc, #228]	; (8000b28 <HAL_GPIO_Init+0x320>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a66:	4a30      	ldr	r2, [pc, #192]	; (8000b28 <HAL_GPIO_Init+0x320>)
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a6c:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <HAL_GPIO_Init+0x320>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d003      	beq.n	8000a90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a90:	4a25      	ldr	r2, [pc, #148]	; (8000b28 <HAL_GPIO_Init+0x320>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a96:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <HAL_GPIO_Init+0x320>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aba:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <HAL_GPIO_Init+0x320>)
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_GPIO_Init+0x320>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	4013      	ands	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae4:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <HAL_GPIO_Init+0x320>)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3301      	adds	r3, #1
 8000aee:	61fb      	str	r3, [r7, #28]
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	f67f ae96 	bls.w	8000824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af8:	bf00      	nop
 8000afa:	3724      	adds	r7, #36	; 0x24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40013800 	.word	0x40013800
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	40020400 	.word	0x40020400
 8000b14:	40020800 	.word	0x40020800
 8000b18:	40020c00 	.word	0x40020c00
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40021400 	.word	0x40021400
 8000b24:	40021800 	.word	0x40021800
 8000b28:	40013c00 	.word	0x40013c00

08000b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	691a      	ldr	r2, [r3, #16]
 8000b3c:	887b      	ldrh	r3, [r7, #2]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e001      	b.n	8000b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b6c:	787b      	ldrb	r3, [r7, #1]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b72:	887a      	ldrh	r2, [r7, #2]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b78:	e003      	b.n	8000b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	041a      	lsls	r2, r3, #16
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	619a      	str	r2, [r3, #24]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d101      	bne.n	8000ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e0ca      	b.n	8000d3a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ba4:	4b67      	ldr	r3, [pc, #412]	; (8000d44 <HAL_RCC_ClockConfig+0x1b4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d90c      	bls.n	8000bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bb2:	4b64      	ldr	r3, [pc, #400]	; (8000d44 <HAL_RCC_ClockConfig+0x1b4>)
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bba:	4b62      	ldr	r3, [pc, #392]	; (8000d44 <HAL_RCC_ClockConfig+0x1b4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d001      	beq.n	8000bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e0b6      	b.n	8000d3a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d020      	beq.n	8000c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d005      	beq.n	8000bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000be4:	4b58      	ldr	r3, [pc, #352]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	4a57      	ldr	r2, [pc, #348]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 0308 	and.w	r3, r3, #8
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d005      	beq.n	8000c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bfc:	4b52      	ldr	r3, [pc, #328]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	4a51      	ldr	r2, [pc, #324]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c08:	4b4f      	ldr	r3, [pc, #316]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	494c      	ldr	r1, [pc, #304]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000c16:	4313      	orrs	r3, r2
 8000c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d044      	beq.n	8000cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d107      	bne.n	8000c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2e:	4b46      	ldr	r3, [pc, #280]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d119      	bne.n	8000c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e07d      	b.n	8000d3a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d003      	beq.n	8000c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d107      	bne.n	8000c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d109      	bne.n	8000c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e06d      	b.n	8000d3a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5e:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e065      	b.n	8000d3a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c6e:	4b36      	ldr	r3, [pc, #216]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f023 0203 	bic.w	r2, r3, #3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	4933      	ldr	r1, [pc, #204]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c80:	f7ff fcae 	bl	80005e0 <HAL_GetTick>
 8000c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c86:	e00a      	b.n	8000c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c88:	f7ff fcaa 	bl	80005e0 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d901      	bls.n	8000c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e04d      	b.n	8000d3a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 020c 	and.w	r2, r3, #12
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d1eb      	bne.n	8000c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cb0:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <HAL_RCC_ClockConfig+0x1b4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 030f 	and.w	r3, r3, #15
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d20c      	bcs.n	8000cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <HAL_RCC_ClockConfig+0x1b4>)
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_RCC_ClockConfig+0x1b4>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d001      	beq.n	8000cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e030      	b.n	8000d3a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d008      	beq.n	8000cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	4915      	ldr	r1, [pc, #84]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d009      	beq.n	8000d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	490d      	ldr	r1, [pc, #52]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d16:	f000 f81d 	bl	8000d54 <HAL_RCC_GetSysClockFreq>
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_RCC_ClockConfig+0x1b8>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	091b      	lsrs	r3, r3, #4
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <HAL_RCC_ClockConfig+0x1bc>)
 8000d28:	5cd3      	ldrb	r3, [r2, r3]
 8000d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_RCC_ClockConfig+0x1c0>)
 8000d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff fc10 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	0801c880 	.word	0x0801c880
 8000d50:	20000008 	.word	0x20000008

08000d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d6a:	4b50      	ldr	r3, [pc, #320]	; (8000eac <HAL_RCC_GetSysClockFreq+0x158>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	d007      	beq.n	8000d86 <HAL_RCC_GetSysClockFreq+0x32>
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	d008      	beq.n	8000d8c <HAL_RCC_GetSysClockFreq+0x38>
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f040 808d 	bne.w	8000e9a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000d80:	4b4b      	ldr	r3, [pc, #300]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8000d82:	60bb      	str	r3, [r7, #8]
       break;
 8000d84:	e08c      	b.n	8000ea0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000d86:	4b4b      	ldr	r3, [pc, #300]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8000d88:	60bb      	str	r3, [r7, #8]
      break;
 8000d8a:	e089      	b.n	8000ea0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d8c:	4b47      	ldr	r3, [pc, #284]	; (8000eac <HAL_RCC_GetSysClockFreq+0x158>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d96:	4b45      	ldr	r3, [pc, #276]	; (8000eac <HAL_RCC_GetSysClockFreq+0x158>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d023      	beq.n	8000dea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000da2:	4b42      	ldr	r3, [pc, #264]	; (8000eac <HAL_RCC_GetSysClockFreq+0x158>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	099b      	lsrs	r3, r3, #6
 8000da8:	f04f 0400 	mov.w	r4, #0
 8000dac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	ea03 0501 	and.w	r5, r3, r1
 8000db8:	ea04 0602 	and.w	r6, r4, r2
 8000dbc:	4a3d      	ldr	r2, [pc, #244]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8000dbe:	fb02 f106 	mul.w	r1, r2, r6
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	fb02 f205 	mul.w	r2, r2, r5
 8000dc8:	440a      	add	r2, r1
 8000dca:	493a      	ldr	r1, [pc, #232]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8000dcc:	fba5 0101 	umull	r0, r1, r5, r1
 8000dd0:	1853      	adds	r3, r2, r1
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f04f 0400 	mov.w	r4, #0
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	f7ff fa19 	bl	8000214 <__aeabi_uldivmod>
 8000de2:	4603      	mov	r3, r0
 8000de4:	460c      	mov	r4, r1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	e049      	b.n	8000e7e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000dea:	4b30      	ldr	r3, [pc, #192]	; (8000eac <HAL_RCC_GetSysClockFreq+0x158>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	099b      	lsrs	r3, r3, #6
 8000df0:	f04f 0400 	mov.w	r4, #0
 8000df4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000df8:	f04f 0200 	mov.w	r2, #0
 8000dfc:	ea03 0501 	and.w	r5, r3, r1
 8000e00:	ea04 0602 	and.w	r6, r4, r2
 8000e04:	4629      	mov	r1, r5
 8000e06:	4632      	mov	r2, r6
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	f04f 0400 	mov.w	r4, #0
 8000e10:	0154      	lsls	r4, r2, #5
 8000e12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000e16:	014b      	lsls	r3, r1, #5
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4622      	mov	r2, r4
 8000e1c:	1b49      	subs	r1, r1, r5
 8000e1e:	eb62 0206 	sbc.w	r2, r2, r6
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	f04f 0400 	mov.w	r4, #0
 8000e2a:	0194      	lsls	r4, r2, #6
 8000e2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000e30:	018b      	lsls	r3, r1, #6
 8000e32:	1a5b      	subs	r3, r3, r1
 8000e34:	eb64 0402 	sbc.w	r4, r4, r2
 8000e38:	f04f 0100 	mov.w	r1, #0
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	00e2      	lsls	r2, r4, #3
 8000e42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000e46:	00d9      	lsls	r1, r3, #3
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4614      	mov	r4, r2
 8000e4c:	195b      	adds	r3, r3, r5
 8000e4e:	eb44 0406 	adc.w	r4, r4, r6
 8000e52:	f04f 0100 	mov.w	r1, #0
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	02a2      	lsls	r2, r4, #10
 8000e5c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000e60:	0299      	lsls	r1, r3, #10
 8000e62:	460b      	mov	r3, r1
 8000e64:	4614      	mov	r4, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	4621      	mov	r1, r4
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f04f 0400 	mov.w	r4, #0
 8000e70:	461a      	mov	r2, r3
 8000e72:	4623      	mov	r3, r4
 8000e74:	f7ff f9ce 	bl	8000214 <__aeabi_uldivmod>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	460c      	mov	r4, r1
 8000e7c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_RCC_GetSysClockFreq+0x158>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	0c1b      	lsrs	r3, r3, #16
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	3301      	adds	r3, #1
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	60bb      	str	r3, [r7, #8]
      break;
 8000e98:	e002      	b.n	8000ea0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8000e9c:	60bb      	str	r3, [r7, #8]
      break;
 8000e9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ea0:	68bb      	ldr	r3, [r7, #8]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	00f42400 	.word	0x00f42400
 8000eb4:	017d7840 	.word	0x017d7840

08000eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008

08000ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ed4:	f7ff fff0 	bl	8000eb8 <HAL_RCC_GetHCLKFreq>
 8000ed8:	4601      	mov	r1, r0
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	0a9b      	lsrs	r3, r3, #10
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000ee6:	5cd3      	ldrb	r3, [r2, r3]
 8000ee8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	0801c890 	.word	0x0801c890

08000ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000efc:	f7ff ffdc 	bl	8000eb8 <HAL_RCC_GetHCLKFreq>
 8000f00:	4601      	mov	r1, r0
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	0b5b      	lsrs	r3, r3, #13
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	4a03      	ldr	r2, [pc, #12]	; (8000f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f0e:	5cd3      	ldrb	r3, [r2, r3]
 8000f10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	0801c890 	.word	0x0801c890

08000f20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d075      	beq.n	8001024 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000f38:	4ba2      	ldr	r3, [pc, #648]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 030c 	and.w	r3, r3, #12
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d00c      	beq.n	8000f5e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f44:	4b9f      	ldr	r3, [pc, #636]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d112      	bne.n	8000f76 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f50:	4b9c      	ldr	r3, [pc, #624]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f5c:	d10b      	bne.n	8000f76 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5e:	4b99      	ldr	r3, [pc, #612]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d05b      	beq.n	8001022 <HAL_RCC_OscConfig+0x102>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d157      	bne.n	8001022 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e20b      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7e:	d106      	bne.n	8000f8e <HAL_RCC_OscConfig+0x6e>
 8000f80:	4b90      	ldr	r3, [pc, #576]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a8f      	ldr	r2, [pc, #572]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	e01d      	b.n	8000fca <HAL_RCC_OscConfig+0xaa>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f96:	d10c      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x92>
 8000f98:	4b8a      	ldr	r3, [pc, #552]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a89      	ldr	r2, [pc, #548]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000f9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b87      	ldr	r3, [pc, #540]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a86      	ldr	r2, [pc, #536]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	e00b      	b.n	8000fca <HAL_RCC_OscConfig+0xaa>
 8000fb2:	4b84      	ldr	r3, [pc, #528]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a83      	ldr	r2, [pc, #524]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b81      	ldr	r3, [pc, #516]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a80      	ldr	r2, [pc, #512]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d013      	beq.n	8000ffa <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fb05 	bl	80005e0 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fda:	f7ff fb01 	bl	80005e0 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b64      	cmp	r3, #100	; 0x64
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e1d0      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fec:	4b75      	ldr	r3, [pc, #468]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0xba>
 8000ff8:	e014      	b.n	8001024 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffa:	f7ff faf1 	bl	80005e0 <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001002:	f7ff faed 	bl	80005e0 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b64      	cmp	r3, #100	; 0x64
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e1bc      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001014:	4b6b      	ldr	r3, [pc, #428]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f0      	bne.n	8001002 <HAL_RCC_OscConfig+0xe2>
 8001020:	e000      	b.n	8001024 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001022:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d063      	beq.n	80010f8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001030:	4b64      	ldr	r3, [pc, #400]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00b      	beq.n	8001054 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800103c:	4b61      	ldr	r3, [pc, #388]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001044:	2b08      	cmp	r3, #8
 8001046:	d11c      	bne.n	8001082 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001048:	4b5e      	ldr	r3, [pc, #376]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d116      	bne.n	8001082 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001054:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_RCC_OscConfig+0x14c>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d001      	beq.n	800106c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e190      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106c:	4b55      	ldr	r3, [pc, #340]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4952      	ldr	r1, [pc, #328]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 800107c:	4313      	orrs	r3, r2
 800107e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001080:	e03a      	b.n	80010f8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d020      	beq.n	80010cc <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108a:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <HAL_RCC_OscConfig+0x2a8>)
 800108c:	2201      	movs	r2, #1
 800108e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001090:	f7ff faa6 	bl	80005e0 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001098:	f7ff faa2 	bl	80005e0 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e171      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b6:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	493f      	ldr	r1, [pc, #252]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]
 80010ca:	e015      	b.n	80010f8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010cc:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <HAL_RCC_OscConfig+0x2a8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d2:	f7ff fa85 	bl	80005e0 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff fa81 	bl	80005e0 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e150      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f0      	bne.n	80010da <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d030      	beq.n	8001166 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d016      	beq.n	800113a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_RCC_OscConfig+0x2ac>)
 800110e:	2201      	movs	r2, #1
 8001110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001112:	f7ff fa65 	bl	80005e0 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800111a:	f7ff fa61 	bl	80005e0 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e130      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 800112e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f0      	beq.n	800111a <HAL_RCC_OscConfig+0x1fa>
 8001138:	e015      	b.n	8001166 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_RCC_OscConfig+0x2ac>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001140:	f7ff fa4e 	bl	80005e0 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001148:	f7ff fa4a 	bl	80005e0 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e119      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 800115c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 809f 	beq.w	80012b2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10f      	bne.n	80011a4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	; 0x40
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_RCC_OscConfig+0x2a4>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011a0:	2301      	movs	r3, #1
 80011a2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_RCC_OscConfig+0x2b0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d120      	bne.n	80011f2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_RCC_OscConfig+0x2b0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <HAL_RCC_OscConfig+0x2b0>)
 80011b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011bc:	f7ff fa10 	bl	80005e0 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c2:	e010      	b.n	80011e6 <HAL_RCC_OscConfig+0x2c6>
 80011c4:	40023800 	.word	0x40023800
 80011c8:	42470000 	.word	0x42470000
 80011cc:	42470e80 	.word	0x42470e80
 80011d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d4:	f7ff fa04 	bl	80005e0 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e0d3      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e6:	4b6c      	ldr	r3, [pc, #432]	; (8001398 <HAL_RCC_OscConfig+0x478>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d106      	bne.n	8001208 <HAL_RCC_OscConfig+0x2e8>
 80011fa:	4b68      	ldr	r3, [pc, #416]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 80011fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fe:	4a67      	ldr	r2, [pc, #412]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6713      	str	r3, [r2, #112]	; 0x70
 8001206:	e01c      	b.n	8001242 <HAL_RCC_OscConfig+0x322>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b05      	cmp	r3, #5
 800120e:	d10c      	bne.n	800122a <HAL_RCC_OscConfig+0x30a>
 8001210:	4b62      	ldr	r3, [pc, #392]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001214:	4a61      	ldr	r2, [pc, #388]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6713      	str	r3, [r2, #112]	; 0x70
 800121c:	4b5f      	ldr	r3, [pc, #380]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 800121e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001220:	4a5e      	ldr	r2, [pc, #376]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6713      	str	r3, [r2, #112]	; 0x70
 8001228:	e00b      	b.n	8001242 <HAL_RCC_OscConfig+0x322>
 800122a:	4b5c      	ldr	r3, [pc, #368]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 800122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122e:	4a5b      	ldr	r2, [pc, #364]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	6713      	str	r3, [r2, #112]	; 0x70
 8001236:	4b59      	ldr	r3, [pc, #356]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 8001238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123a:	4a58      	ldr	r2, [pc, #352]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 800123c:	f023 0304 	bic.w	r3, r3, #4
 8001240:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d015      	beq.n	8001276 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124a:	f7ff f9c9 	bl	80005e0 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7ff f9c5 	bl	80005e0 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001260:	4293      	cmp	r3, r2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e092      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001268:	4b4c      	ldr	r3, [pc, #304]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 800126a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0ee      	beq.n	8001252 <HAL_RCC_OscConfig+0x332>
 8001274:	e014      	b.n	80012a0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001276:	f7ff f9b3 	bl	80005e0 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800127c:	e00a      	b.n	8001294 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800127e:	f7ff f9af 	bl	80005e0 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	f241 3288 	movw	r2, #5000	; 0x1388
 800128c:	4293      	cmp	r3, r2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e07c      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001294:	4b41      	ldr	r3, [pc, #260]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 8001296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1ee      	bne.n	800127e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d105      	bne.n	80012b2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a6:	4b3d      	ldr	r3, [pc, #244]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a3c      	ldr	r2, [pc, #240]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 80012ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d068      	beq.n	800138c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d060      	beq.n	8001388 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d145      	bne.n	800135a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <HAL_RCC_OscConfig+0x480>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7ff f984 	bl	80005e0 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012dc:	f7ff f980 	bl	80005e0 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e04f      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ee:	4b2b      	ldr	r3, [pc, #172]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69da      	ldr	r2, [r3, #28]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	019b      	lsls	r3, r3, #6
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	085b      	lsrs	r3, r3, #1
 8001312:	3b01      	subs	r3, #1
 8001314:	041b      	lsls	r3, r3, #16
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	061b      	lsls	r3, r3, #24
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	071b      	lsls	r3, r3, #28
 8001326:	491d      	ldr	r1, [pc, #116]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_RCC_OscConfig+0x480>)
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001332:	f7ff f955 	bl	80005e0 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133a:	f7ff f951 	bl	80005e0 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e020      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x41a>
 8001358:	e018      	b.n	800138c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_RCC_OscConfig+0x480>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001360:	f7ff f93e 	bl	80005e0 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001368:	f7ff f93a 	bl	80005e0 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e009      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_RCC_OscConfig+0x47c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x448>
 8001386:	e001      	b.n	800138c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40007000 	.word	0x40007000
 800139c:	40023800 	.word	0x40023800
 80013a0:	42470060 	.word	0x42470060

080013a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e056      	b.n	8001464 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d106      	bne.n	80013d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f001 fc9f 	bl	8002d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2202      	movs	r2, #2
 80013da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	ea42 0103 	orr.w	r1, r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	0c1b      	lsrs	r3, r3, #16
 8001434:	f003 0104 	and.w	r1, r3, #4
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	69da      	ldr	r2, [r3, #28]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001452:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	4613      	mov	r3, r2
 800147a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_SPI_Transmit+0x22>
 800148a:	2302      	movs	r3, #2
 800148c:	e11e      	b.n	80016cc <HAL_SPI_Transmit+0x260>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001496:	f7ff f8a3 	bl	80005e0 <HAL_GetTick>
 800149a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d002      	beq.n	80014b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80014ac:	2302      	movs	r3, #2
 80014ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80014b0:	e103      	b.n	80016ba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <HAL_SPI_Transmit+0x52>
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80014c2:	e0fa      	b.n	80016ba <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2203      	movs	r2, #3
 80014c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	88fa      	ldrh	r2, [r7, #6]
 80014dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	88fa      	ldrh	r2, [r7, #6]
 80014e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800150a:	d107      	bne.n	800151c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800151a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001526:	2b40      	cmp	r3, #64	; 0x40
 8001528:	d007      	beq.n	800153a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001542:	d14b      	bne.n	80015dc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <HAL_SPI_Transmit+0xe6>
 800154c:	8afb      	ldrh	r3, [r7, #22]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d13e      	bne.n	80015d0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	881a      	ldrh	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	1c9a      	adds	r2, r3, #2
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800156c:	b29b      	uxth	r3, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	b29a      	uxth	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001576:	e02b      	b.n	80015d0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b02      	cmp	r3, #2
 8001584:	d112      	bne.n	80015ac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	881a      	ldrh	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	1c9a      	adds	r2, r3, #2
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80015aa:	e011      	b.n	80015d0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80015ac:	f7ff f818 	bl	80005e0 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d803      	bhi.n	80015c4 <HAL_SPI_Transmit+0x158>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c2:	d102      	bne.n	80015ca <HAL_SPI_Transmit+0x15e>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80015ce:	e074      	b.n	80016ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1ce      	bne.n	8001578 <HAL_SPI_Transmit+0x10c>
 80015da:	e04c      	b.n	8001676 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <HAL_SPI_Transmit+0x17e>
 80015e4:	8afb      	ldrh	r3, [r7, #22]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d140      	bne.n	800166c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	330c      	adds	r3, #12
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001606:	b29b      	uxth	r3, r3
 8001608:	3b01      	subs	r3, #1
 800160a:	b29a      	uxth	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001610:	e02c      	b.n	800166c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b02      	cmp	r3, #2
 800161e:	d113      	bne.n	8001648 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	330c      	adds	r3, #12
 800162a:	7812      	ldrb	r2, [r2, #0]
 800162c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800163c:	b29b      	uxth	r3, r3
 800163e:	3b01      	subs	r3, #1
 8001640:	b29a      	uxth	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	86da      	strh	r2, [r3, #54]	; 0x36
 8001646:	e011      	b.n	800166c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001648:	f7fe ffca 	bl	80005e0 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d803      	bhi.n	8001660 <HAL_SPI_Transmit+0x1f4>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165e:	d102      	bne.n	8001666 <HAL_SPI_Transmit+0x1fa>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d102      	bne.n	800166c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	77fb      	strb	r3, [r7, #31]
          goto error;
 800166a:	e026      	b.n	80016ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001670:	b29b      	uxth	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1cd      	bne.n	8001612 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f894 	bl	80017a8 <SPI_EndRxTxTransaction>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2220      	movs	r2, #32
 800168a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10a      	bne.n	80016aa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	77fb      	strb	r3, [r7, #31]
 80016b6:	e000      	b.n	80016ba <HAL_SPI_Transmit+0x24e>
  }

error:
 80016b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80016ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80016e4:	e04c      	b.n	8001780 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d048      	beq.n	8001780 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80016ee:	f7fe ff77 	bl	80005e0 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d902      	bls.n	8001704 <SPI_WaitFlagStateUntilTimeout+0x30>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d13d      	bne.n	8001780 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001712:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800171c:	d111      	bne.n	8001742 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001726:	d004      	beq.n	8001732 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001730:	d107      	bne.n	8001742 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001740:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174a:	d10f      	bne.n	800176c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800176a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e00f      	b.n	80017a0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4013      	ands	r3, r2
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	bf0c      	ite	eq
 8001790:	2301      	moveq	r3, #1
 8001792:	2300      	movne	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	429a      	cmp	r2, r3
 800179c:	d1a3      	bne.n	80016e6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <SPI_EndRxTxTransaction+0x7c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <SPI_EndRxTxTransaction+0x80>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0d5b      	lsrs	r3, r3, #21
 80017c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017d2:	d112      	bne.n	80017fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2200      	movs	r2, #0
 80017dc:	2180      	movs	r1, #128	; 0x80
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff ff78 	bl	80016d4 <SPI_WaitFlagStateUntilTimeout>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d016      	beq.n	8001818 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ee:	f043 0220 	orr.w	r2, r3, #32
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e00f      	b.n	800181a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00a      	beq.n	8001816 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3b01      	subs	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001810:	2b80      	cmp	r3, #128	; 0x80
 8001812:	d0f2      	beq.n	80017fa <SPI_EndRxTxTransaction+0x52>
 8001814:	e000      	b.n	8001818 <SPI_EndRxTxTransaction+0x70>
        break;
 8001816:	bf00      	nop
  }

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000008 	.word	0x20000008
 8001828:	165e9f81 	.word	0x165e9f81

0800182c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e01d      	b.n	800187a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d106      	bne.n	8001858 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f001 faa6 	bl	8002da4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2202      	movs	r2, #2
 800185c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3304      	adds	r3, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4610      	mov	r0, r2
 800186c:	f000 f90e 	bl	8001a8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	6839      	ldr	r1, [r7, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fb48 	bl	8001f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <HAL_TIM_PWM_Start+0x74>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d004      	beq.n	80018b0 <HAL_TIM_PWM_Start+0x2c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a14      	ldr	r2, [pc, #80]	; (80018fc <HAL_TIM_PWM_Start+0x78>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_TIM_PWM_Start+0x30>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <HAL_TIM_PWM_Start+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b06      	cmp	r3, #6
 80018da:	d007      	beq.n	80018ec <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40010000 	.word	0x40010000
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001916:	2302      	movs	r3, #2
 8001918:	e0b4      	b.n	8001a84 <HAL_TIM_PWM_ConfigChannel+0x184>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0c      	cmp	r3, #12
 800192e:	f200 809f 	bhi.w	8001a70 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001932:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	0800196d 	.word	0x0800196d
 800193c:	08001a71 	.word	0x08001a71
 8001940:	08001a71 	.word	0x08001a71
 8001944:	08001a71 	.word	0x08001a71
 8001948:	080019ad 	.word	0x080019ad
 800194c:	08001a71 	.word	0x08001a71
 8001950:	08001a71 	.word	0x08001a71
 8001954:	08001a71 	.word	0x08001a71
 8001958:	080019ef 	.word	0x080019ef
 800195c:	08001a71 	.word	0x08001a71
 8001960:	08001a71 	.word	0x08001a71
 8001964:	08001a71 	.word	0x08001a71
 8001968:	08001a2f 	.word	0x08001a2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f92a 	bl	8001bcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0208 	orr.w	r2, r2, #8
 8001986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0204 	bic.w	r2, r2, #4
 8001996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6999      	ldr	r1, [r3, #24]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	619a      	str	r2, [r3, #24]
      break;
 80019aa:	e062      	b.n	8001a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f97a 	bl	8001cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699a      	ldr	r2, [r3, #24]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6999      	ldr	r1, [r3, #24]
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	021a      	lsls	r2, r3, #8
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	619a      	str	r2, [r3, #24]
      break;
 80019ec:	e041      	b.n	8001a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 f9cf 	bl	8001d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	69da      	ldr	r2, [r3, #28]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0208 	orr.w	r2, r2, #8
 8001a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	69da      	ldr	r2, [r3, #28]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0204 	bic.w	r2, r2, #4
 8001a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	69d9      	ldr	r1, [r3, #28]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	61da      	str	r2, [r3, #28]
      break;
 8001a2c:	e021      	b.n	8001a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68b9      	ldr	r1, [r7, #8]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fa23 	bl	8001e80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	69da      	ldr	r2, [r3, #28]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	69da      	ldr	r2, [r3, #28]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69d9      	ldr	r1, [r3, #28]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	021a      	lsls	r2, r3, #8
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	61da      	str	r2, [r3, #28]
      break;
 8001a6e:	e000      	b.n	8001a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001a70:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a40      	ldr	r2, [pc, #256]	; (8001ba0 <TIM_Base_SetConfig+0x114>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d013      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aaa:	d00f      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3d      	ldr	r2, [pc, #244]	; (8001ba4 <TIM_Base_SetConfig+0x118>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00b      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <TIM_Base_SetConfig+0x11c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d007      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a3b      	ldr	r2, [pc, #236]	; (8001bac <TIM_Base_SetConfig+0x120>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d003      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a3a      	ldr	r2, [pc, #232]	; (8001bb0 <TIM_Base_SetConfig+0x124>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d108      	bne.n	8001ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a2f      	ldr	r2, [pc, #188]	; (8001ba0 <TIM_Base_SetConfig+0x114>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d02b      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aec:	d027      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a2c      	ldr	r2, [pc, #176]	; (8001ba4 <TIM_Base_SetConfig+0x118>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d023      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a2b      	ldr	r2, [pc, #172]	; (8001ba8 <TIM_Base_SetConfig+0x11c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a2a      	ldr	r2, [pc, #168]	; (8001bac <TIM_Base_SetConfig+0x120>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01b      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a29      	ldr	r2, [pc, #164]	; (8001bb0 <TIM_Base_SetConfig+0x124>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d017      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <TIM_Base_SetConfig+0x128>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <TIM_Base_SetConfig+0x12c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00f      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a26      	ldr	r2, [pc, #152]	; (8001bbc <TIM_Base_SetConfig+0x130>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00b      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a25      	ldr	r2, [pc, #148]	; (8001bc0 <TIM_Base_SetConfig+0x134>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a24      	ldr	r2, [pc, #144]	; (8001bc4 <TIM_Base_SetConfig+0x138>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d003      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <TIM_Base_SetConfig+0x13c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d108      	bne.n	8001b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <TIM_Base_SetConfig+0x114>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d003      	beq.n	8001b84 <TIM_Base_SetConfig+0xf8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <TIM_Base_SetConfig+0x124>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d103      	bne.n	8001b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	615a      	str	r2, [r3, #20]
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40000800 	.word	0x40000800
 8001bac:	40000c00 	.word	0x40000c00
 8001bb0:	40010400 	.word	0x40010400
 8001bb4:	40014000 	.word	0x40014000
 8001bb8:	40014400 	.word	0x40014400
 8001bbc:	40014800 	.word	0x40014800
 8001bc0:	40001800 	.word	0x40001800
 8001bc4:	40001c00 	.word	0x40001c00
 8001bc8:	40002000 	.word	0x40002000

08001bcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	f023 0201 	bic.w	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f023 0303 	bic.w	r3, r3, #3
 8001c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f023 0302 	bic.w	r3, r3, #2
 8001c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a20      	ldr	r2, [pc, #128]	; (8001ca4 <TIM_OC1_SetConfig+0xd8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d003      	beq.n	8001c30 <TIM_OC1_SetConfig+0x64>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <TIM_OC1_SetConfig+0xdc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d10c      	bne.n	8001c4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f023 0308 	bic.w	r3, r3, #8
 8001c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a15      	ldr	r2, [pc, #84]	; (8001ca4 <TIM_OC1_SetConfig+0xd8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d003      	beq.n	8001c5a <TIM_OC1_SetConfig+0x8e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <TIM_OC1_SetConfig+0xdc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d111      	bne.n	8001c7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	621a      	str	r2, [r3, #32]
}
 8001c98:	bf00      	nop
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40010400 	.word	0x40010400

08001cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	f023 0210 	bic.w	r2, r3, #16
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f023 0320 	bic.w	r3, r3, #32
 8001cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <TIM_OC2_SetConfig+0xe4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d003      	beq.n	8001d14 <TIM_OC2_SetConfig+0x68>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <TIM_OC2_SetConfig+0xe8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d10d      	bne.n	8001d30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <TIM_OC2_SetConfig+0xe4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d003      	beq.n	8001d40 <TIM_OC2_SetConfig+0x94>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <TIM_OC2_SetConfig+0xe8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d113      	bne.n	8001d68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	621a      	str	r2, [r3, #32]
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40010000 	.word	0x40010000
 8001d94:	40010400 	.word	0x40010400

08001d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f023 0303 	bic.w	r3, r3, #3
 8001dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <TIM_OC3_SetConfig+0xe0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d003      	beq.n	8001dfe <TIM_OC3_SetConfig+0x66>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a20      	ldr	r2, [pc, #128]	; (8001e7c <TIM_OC3_SetConfig+0xe4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d10d      	bne.n	8001e1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a16      	ldr	r2, [pc, #88]	; (8001e78 <TIM_OC3_SetConfig+0xe0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d003      	beq.n	8001e2a <TIM_OC3_SetConfig+0x92>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <TIM_OC3_SetConfig+0xe4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d113      	bne.n	8001e52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	621a      	str	r2, [r3, #32]
}
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40010400 	.word	0x40010400

08001e80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	031b      	lsls	r3, r3, #12
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <TIM_OC4_SetConfig+0xa4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d003      	beq.n	8001ee8 <TIM_OC4_SetConfig+0x68>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <TIM_OC4_SetConfig+0xa8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d109      	bne.n	8001efc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	019b      	lsls	r3, r3, #6
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	621a      	str	r2, [r3, #32]
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40010000 	.word	0x40010000
 8001f28:	40010400 	.word	0x40010400

08001f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	2201      	movs	r2, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a1a      	ldr	r2, [r3, #32]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	431a      	orrs	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	621a      	str	r2, [r3, #32]
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e032      	b.n	8001ff4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fc6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002018:	2302      	movs	r3, #2
 800201a:	e03d      	b.n	8002098 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	4313      	orrs	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e03f      	b.n	8002136 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 ff06 	bl	8002edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2224      	movs	r2, #36	; 0x24
 80020d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f829 	bl	8002140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800210c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800211c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002140:	b5b0      	push	{r4, r5, r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002180:	f023 030c 	bic.w	r3, r3, #12
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	68f9      	ldr	r1, [r7, #12]
 800218a:	430b      	orrs	r3, r1
 800218c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ac:	f040 80e4 	bne.w	8002378 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4aab      	ldr	r2, [pc, #684]	; (8002464 <UART_SetConfig+0x324>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <UART_SetConfig+0x84>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4aaa      	ldr	r2, [pc, #680]	; (8002468 <UART_SetConfig+0x328>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d16c      	bne.n	800229e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80021c4:	f7fe fe98 	bl	8000ef8 <HAL_RCC_GetPCLK2Freq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	009a      	lsls	r2, r3, #2
 80021d2:	441a      	add	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	4aa3      	ldr	r2, [pc, #652]	; (800246c <UART_SetConfig+0x32c>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	011c      	lsls	r4, r3, #4
 80021e8:	f7fe fe86 	bl	8000ef8 <HAL_RCC_GetPCLK2Freq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009a      	lsls	r2, r3, #2
 80021f6:	441a      	add	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fbb2 f5f3 	udiv	r5, r2, r3
 8002202:	f7fe fe79 	bl	8000ef8 <HAL_RCC_GetPCLK2Freq>
 8002206:	4602      	mov	r2, r0
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	009a      	lsls	r2, r3, #2
 8002210:	441a      	add	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	4a93      	ldr	r2, [pc, #588]	; (800246c <UART_SetConfig+0x32c>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2264      	movs	r2, #100	; 0x64
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	1aeb      	subs	r3, r5, r3
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	3332      	adds	r3, #50	; 0x32
 8002230:	4a8e      	ldr	r2, [pc, #568]	; (800246c <UART_SetConfig+0x32c>)
 8002232:	fba2 2303 	umull	r2, r3, r2, r3
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800223e:	441c      	add	r4, r3
 8002240:	f7fe fe5a 	bl	8000ef8 <HAL_RCC_GetPCLK2Freq>
 8002244:	4602      	mov	r2, r0
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	009a      	lsls	r2, r3, #2
 800224e:	441a      	add	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fbb2 f5f3 	udiv	r5, r2, r3
 800225a:	f7fe fe4d 	bl	8000ef8 <HAL_RCC_GetPCLK2Freq>
 800225e:	4602      	mov	r2, r0
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	009a      	lsls	r2, r3, #2
 8002268:	441a      	add	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	4a7d      	ldr	r2, [pc, #500]	; (800246c <UART_SetConfig+0x32c>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2264      	movs	r2, #100	; 0x64
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	1aeb      	subs	r3, r5, r3
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	3332      	adds	r3, #50	; 0x32
 8002288:	4a78      	ldr	r2, [pc, #480]	; (800246c <UART_SetConfig+0x32c>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	f003 0207 	and.w	r2, r3, #7
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4422      	add	r2, r4
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	e154      	b.n	8002548 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800229e:	f7fe fe17 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 80022a2:	4602      	mov	r2, r0
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	009a      	lsls	r2, r3, #2
 80022ac:	441a      	add	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b8:	4a6c      	ldr	r2, [pc, #432]	; (800246c <UART_SetConfig+0x32c>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	011c      	lsls	r4, r3, #4
 80022c2:	f7fe fe05 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	009a      	lsls	r2, r3, #2
 80022d0:	441a      	add	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fbb2 f5f3 	udiv	r5, r2, r3
 80022dc:	f7fe fdf8 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	009a      	lsls	r2, r3, #2
 80022ea:	441a      	add	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4a5d      	ldr	r2, [pc, #372]	; (800246c <UART_SetConfig+0x32c>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	2264      	movs	r2, #100	; 0x64
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	1aeb      	subs	r3, r5, r3
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	3332      	adds	r3, #50	; 0x32
 800230a:	4a58      	ldr	r2, [pc, #352]	; (800246c <UART_SetConfig+0x32c>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002318:	441c      	add	r4, r3
 800231a:	f7fe fdd9 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 800231e:	4602      	mov	r2, r0
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	009a      	lsls	r2, r3, #2
 8002328:	441a      	add	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fbb2 f5f3 	udiv	r5, r2, r3
 8002334:	f7fe fdcc 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 8002338:	4602      	mov	r2, r0
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	009a      	lsls	r2, r3, #2
 8002342:	441a      	add	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	4a47      	ldr	r2, [pc, #284]	; (800246c <UART_SetConfig+0x32c>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	2264      	movs	r2, #100	; 0x64
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	1aeb      	subs	r3, r5, r3
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	3332      	adds	r3, #50	; 0x32
 8002362:	4a42      	ldr	r2, [pc, #264]	; (800246c <UART_SetConfig+0x32c>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	f003 0207 	and.w	r2, r3, #7
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4422      	add	r2, r4
 8002374:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002376:	e0e7      	b.n	8002548 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a39      	ldr	r2, [pc, #228]	; (8002464 <UART_SetConfig+0x324>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d004      	beq.n	800238c <UART_SetConfig+0x24c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a38      	ldr	r2, [pc, #224]	; (8002468 <UART_SetConfig+0x328>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d171      	bne.n	8002470 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800238c:	f7fe fdb4 	bl	8000ef8 <HAL_RCC_GetPCLK2Freq>
 8002390:	4602      	mov	r2, r0
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	009a      	lsls	r2, r3, #2
 800239a:	441a      	add	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a6:	4a31      	ldr	r2, [pc, #196]	; (800246c <UART_SetConfig+0x32c>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	011c      	lsls	r4, r3, #4
 80023b0:	f7fe fda2 	bl	8000ef8 <HAL_RCC_GetPCLK2Freq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	009a      	lsls	r2, r3, #2
 80023be:	441a      	add	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	fbb2 f5f3 	udiv	r5, r2, r3
 80023ca:	f7fe fd95 	bl	8000ef8 <HAL_RCC_GetPCLK2Freq>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	009a      	lsls	r2, r3, #2
 80023d8:	441a      	add	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	4a21      	ldr	r2, [pc, #132]	; (800246c <UART_SetConfig+0x32c>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	2264      	movs	r2, #100	; 0x64
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	1aeb      	subs	r3, r5, r3
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	3332      	adds	r3, #50	; 0x32
 80023f8:	4a1c      	ldr	r2, [pc, #112]	; (800246c <UART_SetConfig+0x32c>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002404:	441c      	add	r4, r3
 8002406:	f7fe fd77 	bl	8000ef8 <HAL_RCC_GetPCLK2Freq>
 800240a:	4602      	mov	r2, r0
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	009a      	lsls	r2, r3, #2
 8002414:	441a      	add	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002420:	f7fe fd6a 	bl	8000ef8 <HAL_RCC_GetPCLK2Freq>
 8002424:	4602      	mov	r2, r0
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	009a      	lsls	r2, r3, #2
 800242e:	441a      	add	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	4a0c      	ldr	r2, [pc, #48]	; (800246c <UART_SetConfig+0x32c>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	2264      	movs	r2, #100	; 0x64
 8002444:	fb02 f303 	mul.w	r3, r2, r3
 8002448:	1aeb      	subs	r3, r5, r3
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	3332      	adds	r3, #50	; 0x32
 800244e:	4a07      	ldr	r2, [pc, #28]	; (800246c <UART_SetConfig+0x32c>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	f003 020f 	and.w	r2, r3, #15
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4422      	add	r2, r4
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	e071      	b.n	8002548 <UART_SetConfig+0x408>
 8002464:	40011000 	.word	0x40011000
 8002468:	40011400 	.word	0x40011400
 800246c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002470:	f7fe fd2e 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 8002474:	4602      	mov	r2, r0
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	009a      	lsls	r2, r3, #2
 800247e:	441a      	add	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	4a31      	ldr	r2, [pc, #196]	; (8002550 <UART_SetConfig+0x410>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	011c      	lsls	r4, r3, #4
 8002494:	f7fe fd1c 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 8002498:	4602      	mov	r2, r0
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	009a      	lsls	r2, r3, #2
 80024a2:	441a      	add	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	fbb2 f5f3 	udiv	r5, r2, r3
 80024ae:	f7fe fd0f 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 80024b2:	4602      	mov	r2, r0
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	009a      	lsls	r2, r3, #2
 80024bc:	441a      	add	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	4a21      	ldr	r2, [pc, #132]	; (8002550 <UART_SetConfig+0x410>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	2264      	movs	r2, #100	; 0x64
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	1aeb      	subs	r3, r5, r3
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	3332      	adds	r3, #50	; 0x32
 80024dc:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <UART_SetConfig+0x410>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e8:	441c      	add	r4, r3
 80024ea:	f7fe fcf1 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	009a      	lsls	r2, r3, #2
 80024f8:	441a      	add	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	fbb2 f5f3 	udiv	r5, r2, r3
 8002504:	f7fe fce4 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 8002508:	4602      	mov	r2, r0
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	009a      	lsls	r2, r3, #2
 8002512:	441a      	add	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	fbb2 f3f3 	udiv	r3, r2, r3
 800251e:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <UART_SetConfig+0x410>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	2264      	movs	r2, #100	; 0x64
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	1aeb      	subs	r3, r5, r3
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	3332      	adds	r3, #50	; 0x32
 8002532:	4a07      	ldr	r2, [pc, #28]	; (8002550 <UART_SetConfig+0x410>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	f003 020f 	and.w	r2, r3, #15
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4422      	add	r2, r4
 8002544:	609a      	str	r2, [r3, #8]
}
 8002546:	e7ff      	b.n	8002548 <UART_SetConfig+0x408>
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bdb0      	pop	{r4, r5, r7, pc}
 8002550:	51eb851f 	.word	0x51eb851f

08002554 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800255c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002560:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800256c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002570:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002574:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00b      	beq.n	8002594 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800257c:	e000      	b.n	8002580 <ITM_SendChar+0x2c>
    {
      __NOP();
 800257e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f9      	beq.n	800257e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800258a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002594:	687b      	ldr	r3, [r7, #4]
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025a8:	f7fd ffb4 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ac:	f000 f842 	bl	8002634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b0:	f000 fa30 	bl	8002a14 <MX_GPIO_Init>
  MX_SPI1_Init();
 80025b4:	f000 f89c 	bl	80026f0 <MX_SPI1_Init>
  MX_TIM1_Init();
 80025b8:	f000 f8d0 	bl	800275c <MX_TIM1_Init>
  MX_TIM8_Init();
 80025bc:	f000 f952 	bl	8002864 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80025c0:	f000 f9d4 	bl	800296c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80025c4:	f000 f9fc 	bl	80029c0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  FPGA_Programming();
 80025c8:	f000 fad4 	bl	8002b74 <FPGA_Programming>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80025cc:	2100      	movs	r1, #0
 80025ce:	4814      	ldr	r0, [pc, #80]	; (8002620 <main+0x7c>)
 80025d0:	f7ff f958 	bl	8001884 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 80025d4:	2108      	movs	r1, #8
 80025d6:	4813      	ldr	r0, [pc, #76]	; (8002624 <main+0x80>)
 80025d8:	f7ff f954 	bl	8001884 <HAL_TIM_PWM_Start>
  htim1.Instance->CCR1 = 64;
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <main+0x7c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2240      	movs	r2, #64	; 0x40
 80025e2:	635a      	str	r2, [r3, #52]	; 0x34
  htim8.Instance->CCR3 = 55;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <main+0x80>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2237      	movs	r2, #55	; 0x37
 80025ea:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    /* USER CODE END WHILE */
	  //HAL_Delay(1000);
	  //HAL_GPIO_TogglePin(FPGA_SS_GPIO_Port,FPGA_SS_Pin);
	  //HAL_GPIO_TogglePin(testToggle_GPIO_Port,testToggle_Pin);
	  debugPrintln("Test: 1");
 80025ec:	480e      	ldr	r0, [pc, #56]	; (8002628 <main+0x84>)
 80025ee:	f000 fa9f 	bl	8002b30 <debugPrintln>
	  //if(HAL_GPIO_ReadPin(TX_On_GPIO_Port,TX_On_Pin)){
	//	  debugPrintln("toggle");
	 // }
	  while(duty<255){
 80025f2:	e00c      	b.n	800260e <main+0x6a>
		//  htim1.Instance->CCR1 = duty;
		 // htim8.Instance->CCR3 = duty;
		  duty +=20;
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <main+0x88>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	3314      	adds	r3, #20
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <main+0x88>)
 80025fe:	701a      	strb	r2, [r3, #0]
		  debugPrintln("Test: 2");
 8002600:	480b      	ldr	r0, [pc, #44]	; (8002630 <main+0x8c>)
 8002602:	f000 fa95 	bl	8002b30 <debugPrintln>
		  HAL_Delay(500);
 8002606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800260a:	f7fd fff5 	bl	80005f8 <HAL_Delay>
	  while(duty<255){
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <main+0x88>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2bff      	cmp	r3, #255	; 0xff
 8002614:	d1ee      	bne.n	80025f4 <main+0x50>
	  }
	  duty = 0;
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <main+0x88>)
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
	  debugPrintln("Test: 1");
 800261c:	e7e6      	b.n	80025ec <main+0x48>
 800261e:	bf00      	nop
 8002620:	200000b0 	.word	0x200000b0
 8002624:	20000030 	.word	0x20000030
 8002628:	08003164 	.word	0x08003164
 800262c:	20000029 	.word	0x20000029
 8002630:	0800316c 	.word	0x0800316c

08002634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b094      	sub	sp, #80	; 0x50
 8002638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	2234      	movs	r2, #52	; 0x34
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fd7a 	bl	800313c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002648:	f107 0308 	add.w	r3, r7, #8
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002658:	2300      	movs	r3, #0
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <SystemClock_Config+0xb4>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <SystemClock_Config+0xb4>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002666:	6413      	str	r3, [r2, #64]	; 0x40
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <SystemClock_Config+0xb4>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002674:	2300      	movs	r3, #0
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <SystemClock_Config+0xb8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <SystemClock_Config+0xb8>)
 800267e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <SystemClock_Config+0xb8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002690:	2302      	movs	r3, #2
 8002692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002694:	2301      	movs	r3, #1
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002698:	2310      	movs	r3, #16
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800269c:	2300      	movs	r3, #0
 800269e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fc3b 	bl	8000f20 <HAL_RCC_OscConfig>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80026b0:	f000 fafe 	bl	8002cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b4:	230f      	movs	r3, #15
 80026b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026bc:	2300      	movs	r3, #0
 80026be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fa5e 	bl	8000b90 <HAL_RCC_ClockConfig>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80026da:	f000 fae9 	bl	8002cb0 <Error_Handler>
  }
}
 80026de:	bf00      	nop
 80026e0:	3750      	adds	r7, #80	; 0x50
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40007000 	.word	0x40007000

080026f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026f4:	4b17      	ldr	r3, [pc, #92]	; (8002754 <MX_SPI1_Init+0x64>)
 80026f6:	4a18      	ldr	r2, [pc, #96]	; (8002758 <MX_SPI1_Init+0x68>)
 80026f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <MX_SPI1_Init+0x64>)
 80026fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <MX_SPI1_Init+0x64>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <MX_SPI1_Init+0x64>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_SPI1_Init+0x64>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <MX_SPI1_Init+0x64>)
 8002716:	2200      	movs	r2, #0
 8002718:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_SPI1_Init+0x64>)
 800271c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002720:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <MX_SPI1_Init+0x64>)
 8002724:	2200      	movs	r2, #0
 8002726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <MX_SPI1_Init+0x64>)
 800272a:	2200      	movs	r2, #0
 800272c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MX_SPI1_Init+0x64>)
 8002730:	2200      	movs	r2, #0
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <MX_SPI1_Init+0x64>)
 8002736:	2200      	movs	r2, #0
 8002738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_SPI1_Init+0x64>)
 800273c:	220a      	movs	r2, #10
 800273e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002740:	4804      	ldr	r0, [pc, #16]	; (8002754 <MX_SPI1_Init+0x64>)
 8002742:	f7fe fe2f 	bl	80013a4 <HAL_SPI_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800274c:	f000 fab0 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000130 	.word	0x20000130
 8002758:	40013000 	.word	0x40013000

0800275c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b092      	sub	sp, #72	; 0x48
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002762:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800276c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
 800277c:	615a      	str	r2, [r3, #20]
 800277e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	2220      	movs	r2, #32
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fcd8 	bl	800313c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800278c:	4b33      	ldr	r3, [pc, #204]	; (800285c <MX_TIM1_Init+0x100>)
 800278e:	4a34      	ldr	r2, [pc, #208]	; (8002860 <MX_TIM1_Init+0x104>)
 8002790:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 350;
 8002792:	4b32      	ldr	r3, [pc, #200]	; (800285c <MX_TIM1_Init+0x100>)
 8002794:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002798:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800279a:	4b30      	ldr	r3, [pc, #192]	; (800285c <MX_TIM1_Init+0x100>)
 800279c:	2210      	movs	r2, #16
 800279e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 120;
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <MX_TIM1_Init+0x100>)
 80027a2:	2278      	movs	r2, #120	; 0x78
 80027a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a6:	4b2d      	ldr	r3, [pc, #180]	; (800285c <MX_TIM1_Init+0x100>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <MX_TIM1_Init+0x100>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b2:	4b2a      	ldr	r3, [pc, #168]	; (800285c <MX_TIM1_Init+0x100>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027b8:	4828      	ldr	r0, [pc, #160]	; (800285c <MX_TIM1_Init+0x100>)
 80027ba:	f7ff f837 	bl	800182c <HAL_TIM_PWM_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80027c4:	f000 fa74 	bl	8002cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c8:	2300      	movs	r3, #0
 80027ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027d4:	4619      	mov	r1, r3
 80027d6:	4821      	ldr	r0, [pc, #132]	; (800285c <MX_TIM1_Init+0x100>)
 80027d8:	f7ff fbcd 	bl	8001f76 <HAL_TIMEx_MasterConfigSynchronization>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80027e2:	f000 fa65 	bl	8002cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e6:	2360      	movs	r3, #96	; 0x60
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027f2:	2300      	movs	r3, #0
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002806:	2200      	movs	r2, #0
 8002808:	4619      	mov	r1, r3
 800280a:	4814      	ldr	r0, [pc, #80]	; (800285c <MX_TIM1_Init+0x100>)
 800280c:	f7ff f878 	bl	8001900 <HAL_TIM_PWM_ConfigChannel>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002816:	f000 fa4b 	bl	8002cb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800282e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002832:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	4619      	mov	r1, r3
 800283c:	4807      	ldr	r0, [pc, #28]	; (800285c <MX_TIM1_Init+0x100>)
 800283e:	f7ff fbdf 	bl	8002000 <HAL_TIMEx_ConfigBreakDeadTime>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002848:	f000 fa32 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800284c:	4803      	ldr	r0, [pc, #12]	; (800285c <MX_TIM1_Init+0x100>)
 800284e:	f000 fae1 	bl	8002e14 <HAL_TIM_MspPostInit>

}
 8002852:	bf00      	nop
 8002854:	3748      	adds	r7, #72	; 0x48
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200000b0 	.word	0x200000b0
 8002860:	40010000 	.word	0x40010000

08002864 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b092      	sub	sp, #72	; 0x48
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	611a      	str	r2, [r3, #16]
 8002884:	615a      	str	r2, [r3, #20]
 8002886:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	2220      	movs	r2, #32
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fc54 	bl	800313c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002894:	4b33      	ldr	r3, [pc, #204]	; (8002964 <MX_TIM8_Init+0x100>)
 8002896:	4a34      	ldr	r2, [pc, #208]	; (8002968 <MX_TIM8_Init+0x104>)
 8002898:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 350;
 800289a:	4b32      	ldr	r3, [pc, #200]	; (8002964 <MX_TIM8_Init+0x100>)
 800289c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80028a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <MX_TIM8_Init+0x100>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 120;
 80028a8:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <MX_TIM8_Init+0x100>)
 80028aa:	2278      	movs	r2, #120	; 0x78
 80028ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ae:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <MX_TIM8_Init+0x100>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80028b4:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <MX_TIM8_Init+0x100>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <MX_TIM8_Init+0x100>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80028c0:	4828      	ldr	r0, [pc, #160]	; (8002964 <MX_TIM8_Init+0x100>)
 80028c2:	f7fe ffb3 	bl	800182c <HAL_TIM_PWM_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80028cc:	f000 f9f0 	bl	8002cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d0:	2300      	movs	r3, #0
 80028d2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80028d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028dc:	4619      	mov	r1, r3
 80028de:	4821      	ldr	r0, [pc, #132]	; (8002964 <MX_TIM8_Init+0x100>)
 80028e0:	f7ff fb49 	bl	8001f76 <HAL_TIMEx_MasterConfigSynchronization>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80028ea:	f000 f9e1 	bl	8002cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ee:	2360      	movs	r3, #96	; 0x60
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028f6:	2300      	movs	r3, #0
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028fa:	2300      	movs	r3, #0
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800290a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290e:	2208      	movs	r2, #8
 8002910:	4619      	mov	r1, r3
 8002912:	4814      	ldr	r0, [pc, #80]	; (8002964 <MX_TIM8_Init+0x100>)
 8002914:	f7fe fff4 	bl	8001900 <HAL_TIM_PWM_ConfigChannel>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800291e:	f000 f9c7 	bl	8002cb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800293a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	4619      	mov	r1, r3
 8002944:	4807      	ldr	r0, [pc, #28]	; (8002964 <MX_TIM8_Init+0x100>)
 8002946:	f7ff fb5b 	bl	8002000 <HAL_TIMEx_ConfigBreakDeadTime>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8002950:	f000 f9ae 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002954:	4803      	ldr	r0, [pc, #12]	; (8002964 <MX_TIM8_Init+0x100>)
 8002956:	f000 fa5d 	bl	8002e14 <HAL_TIM_MspPostInit>

}
 800295a:	bf00      	nop
 800295c:	3748      	adds	r7, #72	; 0x48
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000030 	.word	0x20000030
 8002968:	40010400 	.word	0x40010400

0800296c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 8002972:	4a12      	ldr	r2, [pc, #72]	; (80029bc <MX_USART1_UART_Init+0x50>)
 8002974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 8002978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800297c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 8002992:	220c      	movs	r2, #12
 8002994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 80029a4:	f7ff fb7e 	bl	80020a4 <HAL_UART_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029ae:	f000 f97f 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000070 	.word	0x20000070
 80029bc:	40011000 	.word	0x40011000

080029c0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <MX_USART6_UART_Init+0x4c>)
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <MX_USART6_UART_Init+0x50>)
 80029c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <MX_USART6_UART_Init+0x4c>)
 80029cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <MX_USART6_UART_Init+0x4c>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <MX_USART6_UART_Init+0x4c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <MX_USART6_UART_Init+0x4c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <MX_USART6_UART_Init+0x4c>)
 80029e6:	220c      	movs	r2, #12
 80029e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <MX_USART6_UART_Init+0x4c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <MX_USART6_UART_Init+0x4c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80029f6:	4805      	ldr	r0, [pc, #20]	; (8002a0c <MX_USART6_UART_Init+0x4c>)
 80029f8:	f7ff fb54 	bl	80020a4 <HAL_UART_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002a02:	f000 f955 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200000f0 	.word	0x200000f0
 8002a10:	40011400 	.word	0x40011400

08002a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1a:	f107 030c 	add.w	r3, r7, #12
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a3b      	ldr	r2, [pc, #236]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a2d      	ldr	r2, [pc, #180]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADCSync_GPIO_Port, ADCSync_Pin, GPIO_PIN_RESET);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2102      	movs	r1, #2
 8002a82:	4828      	ldr	r0, [pc, #160]	; (8002b24 <MX_GPIO_Init+0x110>)
 8002a84:	f7fe f86a 	bl	8000b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FPGA_Config_GPIO_Port, FPGA_Config_Pin, GPIO_PIN_RESET);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2110      	movs	r1, #16
 8002a8c:	4826      	ldr	r0, [pc, #152]	; (8002b28 <MX_GPIO_Init+0x114>)
 8002a8e:	f7fe f865 	bl	8000b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TX_On_Pin */
  GPIO_InitStruct.Pin = TX_On_Pin;
 8002a92:	2301      	movs	r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TX_On_GPIO_Port, &GPIO_InitStruct);
 8002a9e:	f107 030c 	add.w	r3, r7, #12
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	481f      	ldr	r0, [pc, #124]	; (8002b24 <MX_GPIO_Init+0x110>)
 8002aa6:	f7fd feaf 	bl	8000808 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADCSync_Pin */
  GPIO_InitStruct.Pin = ADCSync_Pin;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ADCSync_GPIO_Port, &GPIO_InitStruct);
 8002aba:	f107 030c 	add.w	r3, r7, #12
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4818      	ldr	r0, [pc, #96]	; (8002b24 <MX_GPIO_Init+0x110>)
 8002ac2:	f7fd fea1 	bl	8000808 <HAL_GPIO_Init>

  /*Configure GPIO pin : FPGA_Config_Pin */
  GPIO_InitStruct.Pin = FPGA_Config_Pin;
 8002ac6:	2310      	movs	r3, #16
 8002ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aca:	2301      	movs	r3, #1
 8002acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FPGA_Config_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	4619      	mov	r1, r3
 8002adc:	4812      	ldr	r0, [pc, #72]	; (8002b28 <MX_GPIO_Init+0x114>)
 8002ade:	f7fd fe93 	bl	8000808 <HAL_GPIO_Init>

  /*Configure GPIO pin : FPGA_CDone_Pin */
  GPIO_InitStruct.Pin = FPGA_CDone_Pin;
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FPGA_CDone_GPIO_Port, &GPIO_InitStruct);
 8002aee:	f107 030c 	add.w	r3, r7, #12
 8002af2:	4619      	mov	r1, r3
 8002af4:	480c      	ldr	r0, [pc, #48]	; (8002b28 <MX_GPIO_Init+0x114>)
 8002af6:	f7fd fe87 	bl	8000808 <HAL_GPIO_Init>

  /*Configure GPIO pin : testToggle_Pin */
  GPIO_InitStruct.Pin = testToggle_Pin;
 8002afa:	2304      	movs	r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(testToggle_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4806      	ldr	r0, [pc, #24]	; (8002b2c <MX_GPIO_Init+0x118>)
 8002b12:	f7fd fe79 	bl	8000808 <HAL_GPIO_Init>



}
 8002b16:	bf00      	nop
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	40020400 	.word	0x40020400

08002b30 <debugPrintln>:

/* USER CODE BEGIN 4 */

void debugPrintln( char *ptr){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	int len = strlen(ptr);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fd fb63 	bl	8000204 <strlen>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<len; i++){
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	e009      	b.n	8002b5c <debugPrintln+0x2c>
		ITM_SendChar( (*ptr++) );
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fcff 	bl	8002554 <ITM_SendChar>
	for(int i=0; i<len; i++){
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	dbf1      	blt.n	8002b48 <debugPrintln+0x18>
	}
	ITM_SendChar(10);
 8002b64:	200a      	movs	r0, #10
 8002b66:	f7ff fcf5 	bl	8002554 <ITM_SendChar>
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <FPGA_Programming>:
 * This Function must be call once at during Init of uC or FPGA and ADCs will not work!
 * FPGA Config file must be loaded onto uC and Config file must not set to Cold or Warm boot
 * for more information see: Lattice Semiconductor FPGA-TN-02001-3.1, section 13
 */

static void FPGA_Programming(void){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0

	char FPGA_TimeOut = 0; // Error timeout
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	73fb      	strb	r3, [r7, #15]
	uint8_t dummyBits[7];
	// loads dummy bits to be transmitted
	for(char i = 0; i < 8; i++){
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73bb      	strb	r3, [r7, #14]
 8002b82:	e009      	b.n	8002b98 <FPGA_Programming+0x24>
		dummyBits[i] = 0b01010101;
 8002b84:	7bbb      	ldrb	r3, [r7, #14]
 8002b86:	f107 0210 	add.w	r2, r7, #16
 8002b8a:	4413      	add	r3, r2
 8002b8c:	2255      	movs	r2, #85	; 0x55
 8002b8e:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(char i = 0; i < 8; i++){
 8002b92:	7bbb      	ldrb	r3, [r7, #14]
 8002b94:	3301      	adds	r3, #1
 8002b96:	73bb      	strb	r3, [r7, #14]
 8002b98:	7bbb      	ldrb	r3, [r7, #14]
 8002b9a:	2b07      	cmp	r3, #7
 8002b9c:	d9f2      	bls.n	8002b84 <FPGA_Programming+0x10>
	}

	/* Write FPGA config pin and SS to low for at least 200 ns to reset and start FPGA
	 * in SPI Slave Configuration
	 */
	HAL_GPIO_WritePin(FPGA_Config_GPIO_Port, FPGA_Config_Pin, GPIO_PIN_RESET);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2110      	movs	r1, #16
 8002ba2:	483b      	ldr	r0, [pc, #236]	; (8002c90 <FPGA_Programming+0x11c>)
 8002ba4:	f7fd ffda 	bl	8000b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FPGA_SS_GPIO_Port,FPGA_SS_Pin, GPIO_PIN_RESET);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2110      	movs	r1, #16
 8002bac:	4839      	ldr	r0, [pc, #228]	; (8002c94 <FPGA_Programming+0x120>)
 8002bae:	f7fd ffd5 	bl	8000b5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FPGA_CLK_GPIO_Port,FPGA_CLK_Pin, GPIO_PIN_SET);
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2120      	movs	r1, #32
 8002bb6:	4837      	ldr	r0, [pc, #220]	; (8002c94 <FPGA_Programming+0x120>)
 8002bb8:	f7fd ffd0 	bl	8000b5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f7fd fd1b 	bl	80005f8 <HAL_Delay>
	HAL_GPIO_WritePin(FPGA_Config_GPIO_Port, FPGA_Config_Pin, GPIO_PIN_SET); // Set high to turn on FPGA THIS PIN SHOULD STAY HIGH!
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	2110      	movs	r1, #16
 8002bc6:	4832      	ldr	r0, [pc, #200]	; (8002c90 <FPGA_Programming+0x11c>)
 8002bc8:	f7fd ffc8 	bl	8000b5c <HAL_GPIO_WritePin>
	HAL_Delay(2); // Wait for FPGA to clear sys memory
 8002bcc:	2002      	movs	r0, #2
 8002bce:	f7fd fd13 	bl	80005f8 <HAL_Delay>
	// Send 8 dummy bits
	HAL_GPIO_WritePin(FPGA_SS_GPIO_Port,FPGA_SS_Pin, GPIO_PIN_SET);
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	2110      	movs	r1, #16
 8002bd6:	482f      	ldr	r0, [pc, #188]	; (8002c94 <FPGA_Programming+0x120>)
 8002bd8:	f7fd ffc0 	bl	8000b5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dummyBits, 1, 50);
 8002bdc:	4639      	mov	r1, r7
 8002bde:	2332      	movs	r3, #50	; 0x32
 8002be0:	2201      	movs	r2, #1
 8002be2:	482d      	ldr	r0, [pc, #180]	; (8002c98 <FPGA_Programming+0x124>)
 8002be4:	f7fe fc42 	bl	800146c <HAL_SPI_Transmit>
	// SEND FPGA CONFIG FILE
	HAL_GPIO_WritePin(FPGA_SS_GPIO_Port,FPGA_SS_Pin, GPIO_PIN_RESET);
 8002be8:	2200      	movs	r2, #0
 8002bea:	2110      	movs	r1, #16
 8002bec:	4829      	ldr	r0, [pc, #164]	; (8002c94 <FPGA_Programming+0x120>)
 8002bee:	f7fd ffb5 	bl	8000b5c <HAL_GPIO_WritePin>
	for (int i = 0; i <= FPGAImSize; i++){
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	e00c      	b.n	8002c12 <FPGA_Programming+0x9e>
		HAL_SPI_Transmit(&hspi1, FPGAIma[i], 1, 50);
 8002bf8:	4a28      	ldr	r2, [pc, #160]	; (8002c9c <FPGA_Programming+0x128>)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	4619      	mov	r1, r3
 8002c02:	2332      	movs	r3, #50	; 0x32
 8002c04:	2201      	movs	r2, #1
 8002c06:	4824      	ldr	r0, [pc, #144]	; (8002c98 <FPGA_Programming+0x124>)
 8002c08:	f7fe fc30 	bl	800146c <HAL_SPI_Transmit>
	for (int i = 0; i <= FPGAImSize; i++){
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	4a23      	ldr	r2, [pc, #140]	; (8002ca0 <FPGA_Programming+0x12c>)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4293      	cmp	r3, r2
 8002c18:	ddee      	ble.n	8002bf8 <FPGA_Programming+0x84>
	}
	HAL_GPIO_WritePin(FPGA_SS_GPIO_Port,FPGA_SS_Pin, GPIO_PIN_SET);
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	2110      	movs	r1, #16
 8002c1e:	481d      	ldr	r0, [pc, #116]	; (8002c94 <FPGA_Programming+0x120>)
 8002c20:	f7fd ff9c 	bl	8000b5c <HAL_GPIO_WritePin>
	while(!HAL_GPIO_ReadPin(FPGA_CDone_GPIO_Port, FPGA_CDone_Pin) && FPGA_TimeOut <= 6){ // wait for CDone to go high
 8002c24:	e00b      	b.n	8002c3e <FPGA_Programming+0xca>
		HAL_Delay(1);
 8002c26:	2001      	movs	r0, #1
 8002c28:	f7fd fce6 	bl	80005f8 <HAL_Delay>
		if (FPGA_TimeOut == 5){
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d102      	bne.n	8002c38 <FPGA_Programming+0xc4>
			//Print error message to debugger
			debugPrintln("Error FPGA");
 8002c32:	481c      	ldr	r0, [pc, #112]	; (8002ca4 <FPGA_Programming+0x130>)
 8002c34:	f7ff ff7c 	bl	8002b30 <debugPrintln>
		}
		FPGA_TimeOut++;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
	while(!HAL_GPIO_ReadPin(FPGA_CDone_GPIO_Port, FPGA_CDone_Pin) && FPGA_TimeOut <= 6){ // wait for CDone to go high
 8002c3e:	2120      	movs	r1, #32
 8002c40:	4813      	ldr	r0, [pc, #76]	; (8002c90 <FPGA_Programming+0x11c>)
 8002c42:	f7fd ff73 	bl	8000b2c <HAL_GPIO_ReadPin>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <FPGA_Programming+0xde>
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d9e9      	bls.n	8002c26 <FPGA_Programming+0xb2>
	}
	if (FPGA_TimeOut < 6){
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d816      	bhi.n	8002c86 <FPGA_Programming+0x112>
		HAL_GPIO_WritePin(FPGA_SS_GPIO_Port,FPGA_SS_Pin, GPIO_PIN_RESET);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2110      	movs	r1, #16
 8002c5c:	480d      	ldr	r0, [pc, #52]	; (8002c94 <FPGA_Programming+0x120>)
 8002c5e:	f7fd ff7d 	bl	8000b5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, dummyBits, 7, HAL_MAX_DELAY );
 8002c62:	4639      	mov	r1, r7
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295
 8002c68:	2207      	movs	r2, #7
 8002c6a:	480b      	ldr	r0, [pc, #44]	; (8002c98 <FPGA_Programming+0x124>)
 8002c6c:	f7fe fbfe 	bl	800146c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(FPGA_SS_GPIO_Port,FPGA_SS_Pin, GPIO_PIN_SET);
 8002c70:	2201      	movs	r2, #1
 8002c72:	2110      	movs	r1, #16
 8002c74:	4807      	ldr	r0, [pc, #28]	; (8002c94 <FPGA_Programming+0x120>)
 8002c76:	f7fd ff71 	bl	8000b5c <HAL_GPIO_WritePin>
		// Print success message
		successFPGA = 1;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <FPGA_Programming+0x134>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
		debugPrintln("FPGA success");
 8002c80:	480a      	ldr	r0, [pc, #40]	; (8002cac <FPGA_Programming+0x138>)
 8002c82:	f7ff ff55 	bl	8002b30 <debugPrintln>
	}

}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40020800 	.word	0x40020800
 8002c94:	40020000 	.word	0x40020000
 8002c98:	20000130 	.word	0x20000130
 8002c9c:	080031a0 	.word	0x080031a0
 8002ca0:	000196dd 	.word	0x000196dd
 8002ca4:	08003174 	.word	0x08003174
 8002ca8:	20000028 	.word	0x20000028
 8002cac:	08003180 	.word	0x08003180

08002cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	debugPrintln("ERROR In Code!");
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <Error_Handler+0x10>)
 8002cb6:	f7ff ff3b 	bl	8002b30 <debugPrintln>
  /* USER CODE END Error_Handler_Debug */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	08003190 	.word	0x08003190

08002cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	4a0f      	ldr	r2, [pc, #60]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a08      	ldr	r2, [pc, #32]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800

08002d14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <HAL_SPI_MspInit+0x84>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d12b      	bne.n	8002d8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d44:	6453      	str	r3, [r2, #68]	; 0x44
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a10      	ldr	r2, [pc, #64]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = FPGA_SS_Pin|FPGA_CLK_Pin|FPGA_MISO_Pin|FPGA_MOSI_Pin;
 8002d6e:	23f0      	movs	r3, #240	; 0xf0
 8002d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d7e:	2305      	movs	r3, #5
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	4619      	mov	r1, r3
 8002d88:	4805      	ldr	r0, [pc, #20]	; (8002da0 <HAL_SPI_MspInit+0x8c>)
 8002d8a:	f7fd fd3d 	bl	8000808 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d8e:	bf00      	nop
 8002d90:	3728      	adds	r7, #40	; 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40013000 	.word	0x40013000
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40020000 	.word	0x40020000

08002da4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a15      	ldr	r2, [pc, #84]	; (8002e08 <HAL_TIM_PWM_MspInit+0x64>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d10e      	bne.n	8002dd4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <HAL_TIM_PWM_MspInit+0x68>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	4a13      	ldr	r2, [pc, #76]	; (8002e0c <HAL_TIM_PWM_MspInit+0x68>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_TIM_PWM_MspInit+0x68>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002dd2:	e012      	b.n	8002dfa <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	; (8002e10 <HAL_TIM_PWM_MspInit+0x6c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d10d      	bne.n	8002dfa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_TIM_PWM_MspInit+0x68>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	4a09      	ldr	r2, [pc, #36]	; (8002e0c <HAL_TIM_PWM_MspInit+0x68>)
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	6453      	str	r3, [r2, #68]	; 0x44
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <HAL_TIM_PWM_MspInit+0x68>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40010400 	.word	0x40010400

08002e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	; 0x28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a25      	ldr	r2, [pc, #148]	; (8002ec8 <HAL_TIM_MspPostInit+0xb4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d11f      	bne.n	8002e76 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_TIM_MspPostInit+0xb8>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a23      	ldr	r2, [pc, #140]	; (8002ecc <HAL_TIM_MspPostInit+0xb8>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <HAL_TIM_MspPostInit+0xb8>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = Tx_C1_Pin;
 8002e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e60:	2300      	movs	r3, #0
 8002e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e64:	2301      	movs	r3, #1
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Tx_C1_GPIO_Port, &GPIO_InitStruct);
 8002e68:	f107 0314 	add.w	r3, r7, #20
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4818      	ldr	r0, [pc, #96]	; (8002ed0 <HAL_TIM_MspPostInit+0xbc>)
 8002e70:	f7fd fcca 	bl	8000808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002e74:	e023      	b.n	8002ebe <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <HAL_TIM_MspPostInit+0xc0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d11e      	bne.n	8002ebe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_TIM_MspPostInit+0xb8>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <HAL_TIM_MspPostInit+0xb8>)
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e90:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <HAL_TIM_MspPostInit+0xb8>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Tx_C2_Pin;
 8002e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Tx_C2_GPIO_Port, &GPIO_InitStruct);
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4807      	ldr	r0, [pc, #28]	; (8002ed8 <HAL_TIM_MspPostInit+0xc4>)
 8002eba:	f7fd fca5 	bl	8000808 <HAL_GPIO_Init>
}
 8002ebe:	bf00      	nop
 8002ec0:	3728      	adds	r7, #40	; 0x28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40010400 	.word	0x40010400
 8002ed8:	40020800 	.word	0x40020800

08002edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08c      	sub	sp, #48	; 0x30
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 031c 	add.w	r3, r7, #28
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a32      	ldr	r2, [pc, #200]	; (8002fc4 <HAL_UART_MspInit+0xe8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d12d      	bne.n	8002f5a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_UART_MspInit+0xec>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	4a30      	ldr	r2, [pc, #192]	; (8002fc8 <HAL_UART_MspInit+0xec>)
 8002f08:	f043 0310 	orr.w	r3, r3, #16
 8002f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0e:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <HAL_UART_MspInit+0xec>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <HAL_UART_MspInit+0xec>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <HAL_UART_MspInit+0xec>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <HAL_UART_MspInit+0xec>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f40:	2301      	movs	r3, #1
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f44:	2303      	movs	r3, #3
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f48:	2307      	movs	r3, #7
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	4619      	mov	r1, r3
 8002f52:	481e      	ldr	r0, [pc, #120]	; (8002fcc <HAL_UART_MspInit+0xf0>)
 8002f54:	f7fd fc58 	bl	8000808 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f58:	e030      	b.n	8002fbc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <HAL_UART_MspInit+0xf4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d12b      	bne.n	8002fbc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f64:	2300      	movs	r3, #0
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <HAL_UART_MspInit+0xec>)
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_UART_MspInit+0xec>)
 8002f6e:	f043 0320 	orr.w	r3, r3, #32
 8002f72:	6453      	str	r3, [r2, #68]	; 0x44
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <HAL_UART_MspInit+0xec>)
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HAL_UART_MspInit+0xec>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	4a0f      	ldr	r2, [pc, #60]	; (8002fc8 <HAL_UART_MspInit+0xec>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <HAL_UART_MspInit+0xec>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = dataOut_Tx_Pin|dataOut_Rx_Pin;
 8002f9c:	23c0      	movs	r3, #192	; 0xc0
 8002f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fac:	2308      	movs	r3, #8
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb0:	f107 031c 	add.w	r3, r7, #28
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4807      	ldr	r0, [pc, #28]	; (8002fd4 <HAL_UART_MspInit+0xf8>)
 8002fb8:	f7fd fc26 	bl	8000808 <HAL_GPIO_Init>
}
 8002fbc:	bf00      	nop
 8002fbe:	3730      	adds	r7, #48	; 0x30
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40011000 	.word	0x40011000
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020000 	.word	0x40020000
 8002fd0:	40011400 	.word	0x40011400
 8002fd4:	40020800 	.word	0x40020800

08002fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fea:	e7fe      	b.n	8002fea <HardFault_Handler+0x4>

08002fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff0:	e7fe      	b.n	8002ff0 <MemManage_Handler+0x4>

08002ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ff6:	e7fe      	b.n	8002ff6 <BusFault_Handler+0x4>

08002ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ffc:	e7fe      	b.n	8002ffc <UsageFault_Handler+0x4>

08002ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800302c:	f7fd fac4 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}

08003034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003038:	4b16      	ldr	r3, [pc, #88]	; (8003094 <SystemInit+0x60>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	4a15      	ldr	r2, [pc, #84]	; (8003094 <SystemInit+0x60>)
 8003040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <SystemInit+0x64>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a12      	ldr	r2, [pc, #72]	; (8003098 <SystemInit+0x64>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <SystemInit+0x64>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800305a:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <SystemInit+0x64>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a0e      	ldr	r2, [pc, #56]	; (8003098 <SystemInit+0x64>)
 8003060:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003068:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <SystemInit+0x64>)
 800306c:	4a0b      	ldr	r2, [pc, #44]	; (800309c <SystemInit+0x68>)
 800306e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <SystemInit+0x64>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a08      	ldr	r2, [pc, #32]	; (8003098 <SystemInit+0x64>)
 8003076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <SystemInit+0x64>)
 800307e:	2200      	movs	r2, #0
 8003080:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003082:	4b04      	ldr	r3, [pc, #16]	; (8003094 <SystemInit+0x60>)
 8003084:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003088:	609a      	str	r2, [r3, #8]
#endif
}
 800308a:	bf00      	nop
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00
 8003098:	40023800 	.word	0x40023800
 800309c:	24003010 	.word	0x24003010

080030a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80030a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80030a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030a6:	e003      	b.n	80030b0 <LoopCopyDataInit>

080030a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030ae:	3104      	adds	r1, #4

080030b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030b0:	480b      	ldr	r0, [pc, #44]	; (80030e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030b8:	d3f6      	bcc.n	80030a8 <CopyDataInit>
  ldr  r2, =_sbss
 80030ba:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030bc:	e002      	b.n	80030c4 <LoopFillZerobss>

080030be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80030be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030c0:	f842 3b04 	str.w	r3, [r2], #4

080030c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030c8:	d3f9      	bcc.n	80030be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030ca:	f7ff ffb3 	bl	8003034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ce:	f000 f811 	bl	80030f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030d2:	f7ff fa67 	bl	80025a4 <main>
  bx  lr    
 80030d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80030d8:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80030dc:	0801c8a8 	.word	0x0801c8a8
  ldr  r0, =_sdata
 80030e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030e4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80030e8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80030ec:	20000188 	.word	0x20000188

080030f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030f0:	e7fe      	b.n	80030f0 <ADC_IRQHandler>
	...

080030f4 <__libc_init_array>:
 80030f4:	b570      	push	{r4, r5, r6, lr}
 80030f6:	4e0d      	ldr	r6, [pc, #52]	; (800312c <__libc_init_array+0x38>)
 80030f8:	4c0d      	ldr	r4, [pc, #52]	; (8003130 <__libc_init_array+0x3c>)
 80030fa:	1ba4      	subs	r4, r4, r6
 80030fc:	10a4      	asrs	r4, r4, #2
 80030fe:	2500      	movs	r5, #0
 8003100:	42a5      	cmp	r5, r4
 8003102:	d109      	bne.n	8003118 <__libc_init_array+0x24>
 8003104:	4e0b      	ldr	r6, [pc, #44]	; (8003134 <__libc_init_array+0x40>)
 8003106:	4c0c      	ldr	r4, [pc, #48]	; (8003138 <__libc_init_array+0x44>)
 8003108:	f000 f820 	bl	800314c <_init>
 800310c:	1ba4      	subs	r4, r4, r6
 800310e:	10a4      	asrs	r4, r4, #2
 8003110:	2500      	movs	r5, #0
 8003112:	42a5      	cmp	r5, r4
 8003114:	d105      	bne.n	8003122 <__libc_init_array+0x2e>
 8003116:	bd70      	pop	{r4, r5, r6, pc}
 8003118:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800311c:	4798      	blx	r3
 800311e:	3501      	adds	r5, #1
 8003120:	e7ee      	b.n	8003100 <__libc_init_array+0xc>
 8003122:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003126:	4798      	blx	r3
 8003128:	3501      	adds	r5, #1
 800312a:	e7f2      	b.n	8003112 <__libc_init_array+0x1e>
 800312c:	0801c8a0 	.word	0x0801c8a0
 8003130:	0801c8a0 	.word	0x0801c8a0
 8003134:	0801c8a0 	.word	0x0801c8a0
 8003138:	0801c8a4 	.word	0x0801c8a4

0800313c <memset>:
 800313c:	4402      	add	r2, r0
 800313e:	4603      	mov	r3, r0
 8003140:	4293      	cmp	r3, r2
 8003142:	d100      	bne.n	8003146 <memset+0xa>
 8003144:	4770      	bx	lr
 8003146:	f803 1b01 	strb.w	r1, [r3], #1
 800314a:	e7f9      	b.n	8003140 <memset+0x4>

0800314c <_init>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	bf00      	nop
 8003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003152:	bc08      	pop	{r3}
 8003154:	469e      	mov	lr, r3
 8003156:	4770      	bx	lr

08003158 <_fini>:
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	bf00      	nop
 800315c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315e:	bc08      	pop	{r3}
 8003160:	469e      	mov	lr, r3
 8003162:	4770      	bx	lr
