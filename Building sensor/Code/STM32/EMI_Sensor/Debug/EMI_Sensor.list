
EMI_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002a68  08002a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a80  08002a80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a80  08002a80  00012a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a88  08002a88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08002a9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08002a9c  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b552  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001932  00000000  00000000  0002b58e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d50  00000000  00000000  0002cec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c78  00000000  00000000  0002dc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ecdc  00000000  00000000  0002e888  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009354  00000000  00000000  0004d564  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000be38e  00000000  00000000  000568b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114c46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003864  00000000  00000000  00114cc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002a50 	.word	0x08002a50

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002a50 	.word	0x08002a50

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f92f 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f002 f846 	bl	80025c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f939 	bl	80007de <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f90f 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000028 	.word	0x20000028

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff47 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff5c 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ffb0 	bl	800074c <SysTick_Config>
 80007ec:	4603      	mov	r3, r0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
 8000812:	e165      	b.n	8000ae0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000814:	2201      	movs	r2, #1
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	429a      	cmp	r2, r3
 800082e:	f040 8154 	bne.w	8000ada <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d003      	beq.n	8000842 <HAL_GPIO_Init+0x4a>
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b12      	cmp	r3, #18
 8000840:	d123      	bne.n	800088a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	08da      	lsrs	r2, r3, #3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3208      	adds	r2, #8
 800084a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800084e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	220f      	movs	r2, #15
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	4013      	ands	r3, r2
 8000864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	691a      	ldr	r2, [r3, #16]
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	f003 0307 	and.w	r3, r3, #7
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	69ba      	ldr	r2, [r7, #24]
 8000878:	4313      	orrs	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	08da      	lsrs	r2, r3, #3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3208      	adds	r2, #8
 8000884:	69b9      	ldr	r1, [r7, #24]
 8000886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	2203      	movs	r2, #3
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	4013      	ands	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f003 0203 	and.w	r2, r3, #3
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d00b      	beq.n	80008de <HAL_GPIO_Init+0xe6>
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d007      	beq.n	80008de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d2:	2b11      	cmp	r3, #17
 80008d4:	d003      	beq.n	80008de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b12      	cmp	r3, #18
 80008dc:	d130      	bne.n	8000940 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	2203      	movs	r2, #3
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4013      	ands	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	68da      	ldr	r2, [r3, #12]
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4313      	orrs	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000914:	2201      	movs	r2, #1
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	091b      	lsrs	r3, r3, #4
 800092a:	f003 0201 	and.w	r2, r3, #1
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4313      	orrs	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	2203      	movs	r2, #3
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	4013      	ands	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4313      	orrs	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 80ae 	beq.w	8000ada <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b5c      	ldr	r3, [pc, #368]	; (8000af4 <HAL_GPIO_Init+0x2fc>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a5b      	ldr	r2, [pc, #364]	; (8000af4 <HAL_GPIO_Init+0x2fc>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b59      	ldr	r3, [pc, #356]	; (8000af4 <HAL_GPIO_Init+0x2fc>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800099a:	4a57      	ldr	r2, [pc, #348]	; (8000af8 <HAL_GPIO_Init+0x300>)
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	3302      	adds	r3, #2
 80009a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	220f      	movs	r2, #15
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	4013      	ands	r3, r2
 80009bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a4e      	ldr	r2, [pc, #312]	; (8000afc <HAL_GPIO_Init+0x304>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d025      	beq.n	8000a12 <HAL_GPIO_Init+0x21a>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a4d      	ldr	r2, [pc, #308]	; (8000b00 <HAL_GPIO_Init+0x308>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d01f      	beq.n	8000a0e <HAL_GPIO_Init+0x216>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a4c      	ldr	r2, [pc, #304]	; (8000b04 <HAL_GPIO_Init+0x30c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d019      	beq.n	8000a0a <HAL_GPIO_Init+0x212>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4b      	ldr	r2, [pc, #300]	; (8000b08 <HAL_GPIO_Init+0x310>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d013      	beq.n	8000a06 <HAL_GPIO_Init+0x20e>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4a      	ldr	r2, [pc, #296]	; (8000b0c <HAL_GPIO_Init+0x314>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d00d      	beq.n	8000a02 <HAL_GPIO_Init+0x20a>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a49      	ldr	r2, [pc, #292]	; (8000b10 <HAL_GPIO_Init+0x318>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d007      	beq.n	80009fe <HAL_GPIO_Init+0x206>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a48      	ldr	r2, [pc, #288]	; (8000b14 <HAL_GPIO_Init+0x31c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_GPIO_Init+0x202>
 80009f6:	2306      	movs	r3, #6
 80009f8:	e00c      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 80009fa:	2307      	movs	r3, #7
 80009fc:	e00a      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 80009fe:	2305      	movs	r3, #5
 8000a00:	e008      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a02:	2304      	movs	r3, #4
 8000a04:	e006      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a06:	2303      	movs	r3, #3
 8000a08:	e004      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	e002      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e000      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a12:	2300      	movs	r3, #0
 8000a14:	69fa      	ldr	r2, [r7, #28]
 8000a16:	f002 0203 	and.w	r2, r2, #3
 8000a1a:	0092      	lsls	r2, r2, #2
 8000a1c:	4093      	lsls	r3, r2
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a24:	4934      	ldr	r1, [pc, #208]	; (8000af8 <HAL_GPIO_Init+0x300>)
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a56:	4a30      	ldr	r2, [pc, #192]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a80:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a86:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4013      	ands	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aaa:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4013      	ands	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ad4:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3301      	adds	r3, #1
 8000ade:	61fb      	str	r3, [r7, #28]
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	f67f ae96 	bls.w	8000814 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3724      	adds	r7, #36	; 0x24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40013800 	.word	0x40013800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40020800 	.word	0x40020800
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40021400 	.word	0x40021400
 8000b14:	40021800 	.word	0x40021800
 8000b18:	40013c00 	.word	0x40013c00

08000b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	807b      	strh	r3, [r7, #2]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b2c:	787b      	ldrb	r3, [r7, #1]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b32:	887a      	ldrh	r2, [r7, #2]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b38:	e003      	b.n	8000b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	041a      	lsls	r2, r3, #16
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	619a      	str	r2, [r3, #24]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	460b      	mov	r3, r1
 8000b58:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	695a      	ldr	r2, [r3, #20]
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	401a      	ands	r2, r3
 8000b62:	887b      	ldrh	r3, [r7, #2]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d104      	bne.n	8000b72 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b68:	887b      	ldrh	r3, [r7, #2]
 8000b6a:	041a      	lsls	r2, r3, #16
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b70:	e002      	b.n	8000b78 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b72:	887a      	ldrh	r2, [r7, #2]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	619a      	str	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e0ca      	b.n	8000d2e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b98:	4b67      	ldr	r3, [pc, #412]	; (8000d38 <HAL_RCC_ClockConfig+0x1b4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f003 030f 	and.w	r3, r3, #15
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d90c      	bls.n	8000bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ba6:	4b64      	ldr	r3, [pc, #400]	; (8000d38 <HAL_RCC_ClockConfig+0x1b4>)
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bae:	4b62      	ldr	r3, [pc, #392]	; (8000d38 <HAL_RCC_ClockConfig+0x1b4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d001      	beq.n	8000bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e0b6      	b.n	8000d2e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d020      	beq.n	8000c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d005      	beq.n	8000be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bd8:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	4a57      	ldr	r2, [pc, #348]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000bde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000be2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d005      	beq.n	8000bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bf0:	4b52      	ldr	r3, [pc, #328]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	4a51      	ldr	r2, [pc, #324]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000bf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bfc:	4b4f      	ldr	r3, [pc, #316]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	494c      	ldr	r1, [pc, #304]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d044      	beq.n	8000ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d107      	bne.n	8000c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c22:	4b46      	ldr	r3, [pc, #280]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d119      	bne.n	8000c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e07d      	b.n	8000d2e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d003      	beq.n	8000c42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d107      	bne.n	8000c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c42:	4b3e      	ldr	r3, [pc, #248]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d109      	bne.n	8000c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e06d      	b.n	8000d2e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c52:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e065      	b.n	8000d2e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c62:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f023 0203 	bic.w	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	4933      	ldr	r1, [pc, #204]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000c70:	4313      	orrs	r3, r2
 8000c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c74:	f7ff fcac 	bl	80005d0 <HAL_GetTick>
 8000c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c7a:	e00a      	b.n	8000c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c7c:	f7ff fca8 	bl	80005d0 <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d901      	bls.n	8000c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e04d      	b.n	8000d2e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c92:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f003 020c 	and.w	r2, r3, #12
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d1eb      	bne.n	8000c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <HAL_RCC_ClockConfig+0x1b4>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 030f 	and.w	r3, r3, #15
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d20c      	bcs.n	8000ccc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <HAL_RCC_ClockConfig+0x1b4>)
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <HAL_RCC_ClockConfig+0x1b4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d001      	beq.n	8000ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e030      	b.n	8000d2e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d008      	beq.n	8000cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	4915      	ldr	r1, [pc, #84]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d009      	beq.n	8000d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	490d      	ldr	r1, [pc, #52]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000d06:	4313      	orrs	r3, r2
 8000d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d0a:	f000 f81d 	bl	8000d48 <HAL_RCC_GetSysClockFreq>
 8000d0e:	4601      	mov	r1, r0
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_RCC_ClockConfig+0x1b8>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	091b      	lsrs	r3, r3, #4
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <HAL_RCC_ClockConfig+0x1bc>)
 8000d1c:	5cd3      	ldrb	r3, [r2, r3]
 8000d1e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_RCC_ClockConfig+0x1c0>)
 8000d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff fc0e 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	08002a68 	.word	0x08002a68
 8000d44:	20000008 	.word	0x20000008

08000d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d5e:	4b50      	ldr	r3, [pc, #320]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d007      	beq.n	8000d7a <HAL_RCC_GetSysClockFreq+0x32>
 8000d6a:	2b08      	cmp	r3, #8
 8000d6c:	d008      	beq.n	8000d80 <HAL_RCC_GetSysClockFreq+0x38>
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 808d 	bne.w	8000e8e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000d74:	4b4b      	ldr	r3, [pc, #300]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8000d76:	60bb      	str	r3, [r7, #8]
       break;
 8000d78:	e08c      	b.n	8000e94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000d7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8000d7c:	60bb      	str	r3, [r7, #8]
      break;
 8000d7e:	e089      	b.n	8000e94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d80:	4b47      	ldr	r3, [pc, #284]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d8a:	4b45      	ldr	r3, [pc, #276]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d023      	beq.n	8000dde <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d96:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	099b      	lsrs	r3, r3, #6
 8000d9c:	f04f 0400 	mov.w	r4, #0
 8000da0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	ea03 0501 	and.w	r5, r3, r1
 8000dac:	ea04 0602 	and.w	r6, r4, r2
 8000db0:	4a3d      	ldr	r2, [pc, #244]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8000db2:	fb02 f106 	mul.w	r1, r2, r6
 8000db6:	2200      	movs	r2, #0
 8000db8:	fb02 f205 	mul.w	r2, r2, r5
 8000dbc:	440a      	add	r2, r1
 8000dbe:	493a      	ldr	r1, [pc, #232]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x160>)
 8000dc0:	fba5 0101 	umull	r0, r1, r5, r1
 8000dc4:	1853      	adds	r3, r2, r1
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f04f 0400 	mov.w	r4, #0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4623      	mov	r3, r4
 8000dd2:	f7ff fa17 	bl	8000204 <__aeabi_uldivmod>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	460c      	mov	r4, r1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	e049      	b.n	8000e72 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000dde:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	099b      	lsrs	r3, r3, #6
 8000de4:	f04f 0400 	mov.w	r4, #0
 8000de8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	ea03 0501 	and.w	r5, r3, r1
 8000df4:	ea04 0602 	and.w	r6, r4, r2
 8000df8:	4629      	mov	r1, r5
 8000dfa:	4632      	mov	r2, r6
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	f04f 0400 	mov.w	r4, #0
 8000e04:	0154      	lsls	r4, r2, #5
 8000e06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000e0a:	014b      	lsls	r3, r1, #5
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4622      	mov	r2, r4
 8000e10:	1b49      	subs	r1, r1, r5
 8000e12:	eb62 0206 	sbc.w	r2, r2, r6
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	f04f 0400 	mov.w	r4, #0
 8000e1e:	0194      	lsls	r4, r2, #6
 8000e20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000e24:	018b      	lsls	r3, r1, #6
 8000e26:	1a5b      	subs	r3, r3, r1
 8000e28:	eb64 0402 	sbc.w	r4, r4, r2
 8000e2c:	f04f 0100 	mov.w	r1, #0
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	00e2      	lsls	r2, r4, #3
 8000e36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000e3a:	00d9      	lsls	r1, r3, #3
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4614      	mov	r4, r2
 8000e40:	195b      	adds	r3, r3, r5
 8000e42:	eb44 0406 	adc.w	r4, r4, r6
 8000e46:	f04f 0100 	mov.w	r1, #0
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	02a2      	lsls	r2, r4, #10
 8000e50:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000e54:	0299      	lsls	r1, r3, #10
 8000e56:	460b      	mov	r3, r1
 8000e58:	4614      	mov	r4, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	4621      	mov	r1, r4
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f04f 0400 	mov.w	r4, #0
 8000e64:	461a      	mov	r2, r3
 8000e66:	4623      	mov	r3, r4
 8000e68:	f7ff f9cc 	bl	8000204 <__aeabi_uldivmod>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	460c      	mov	r4, r1
 8000e70:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x158>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	0c1b      	lsrs	r3, r3, #16
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	60bb      	str	r3, [r7, #8]
      break;
 8000e8c:	e002      	b.n	8000e94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8000e90:	60bb      	str	r3, [r7, #8]
      break;
 8000e92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e94:	68bb      	ldr	r3, [r7, #8]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	00f42400 	.word	0x00f42400
 8000ea8:	017d7840 	.word	0x017d7840

08000eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ec8:	f7ff fff0 	bl	8000eac <HAL_RCC_GetHCLKFreq>
 8000ecc:	4601      	mov	r1, r0
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	0a9b      	lsrs	r3, r3, #10
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	08002a78 	.word	0x08002a78

08000eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ef0:	f7ff ffdc 	bl	8000eac <HAL_RCC_GetHCLKFreq>
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	0b5b      	lsrs	r3, r3, #13
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	4a03      	ldr	r2, [pc, #12]	; (8000f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f02:	5cd3      	ldrb	r3, [r2, r3]
 8000f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	08002a78 	.word	0x08002a78

08000f14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d075      	beq.n	8001018 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000f2c:	4ba2      	ldr	r3, [pc, #648]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d00c      	beq.n	8000f52 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f38:	4b9f      	ldr	r3, [pc, #636]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d112      	bne.n	8000f6a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f44:	4b9c      	ldr	r3, [pc, #624]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f50:	d10b      	bne.n	8000f6a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f52:	4b99      	ldr	r3, [pc, #612]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d05b      	beq.n	8001016 <HAL_RCC_OscConfig+0x102>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d157      	bne.n	8001016 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e20b      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f72:	d106      	bne.n	8000f82 <HAL_RCC_OscConfig+0x6e>
 8000f74:	4b90      	ldr	r3, [pc, #576]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a8f      	ldr	r2, [pc, #572]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	e01d      	b.n	8000fbe <HAL_RCC_OscConfig+0xaa>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f8a:	d10c      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x92>
 8000f8c:	4b8a      	ldr	r3, [pc, #552]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a89      	ldr	r2, [pc, #548]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b87      	ldr	r3, [pc, #540]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a86      	ldr	r2, [pc, #536]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	e00b      	b.n	8000fbe <HAL_RCC_OscConfig+0xaa>
 8000fa6:	4b84      	ldr	r3, [pc, #528]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a83      	ldr	r2, [pc, #524]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b81      	ldr	r3, [pc, #516]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a80      	ldr	r2, [pc, #512]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d013      	beq.n	8000fee <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fb03 	bl	80005d0 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fce:	f7ff faff 	bl	80005d0 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b64      	cmp	r3, #100	; 0x64
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e1d0      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe0:	4b75      	ldr	r3, [pc, #468]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0f0      	beq.n	8000fce <HAL_RCC_OscConfig+0xba>
 8000fec:	e014      	b.n	8001018 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fee:	f7ff faef 	bl	80005d0 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff6:	f7ff faeb 	bl	80005d0 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b64      	cmp	r3, #100	; 0x64
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e1bc      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001008:	4b6b      	ldr	r3, [pc, #428]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f0      	bne.n	8000ff6 <HAL_RCC_OscConfig+0xe2>
 8001014:	e000      	b.n	8001018 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001016:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d063      	beq.n	80010ec <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001024:	4b64      	ldr	r3, [pc, #400]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 030c 	and.w	r3, r3, #12
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00b      	beq.n	8001048 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001030:	4b61      	ldr	r3, [pc, #388]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001038:	2b08      	cmp	r3, #8
 800103a:	d11c      	bne.n	8001076 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800103c:	4b5e      	ldr	r3, [pc, #376]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d116      	bne.n	8001076 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001048:	4b5b      	ldr	r3, [pc, #364]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_RCC_OscConfig+0x14c>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d001      	beq.n	8001060 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e190      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001060:	4b55      	ldr	r3, [pc, #340]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4952      	ldr	r1, [pc, #328]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8001070:	4313      	orrs	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001074:	e03a      	b.n	80010ec <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d020      	beq.n	80010c0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107e:	4b4f      	ldr	r3, [pc, #316]	; (80011bc <HAL_RCC_OscConfig+0x2a8>)
 8001080:	2201      	movs	r2, #1
 8001082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001084:	f7ff faa4 	bl	80005d0 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108c:	f7ff faa0 	bl	80005d0 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e171      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109e:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f0      	beq.n	800108c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010aa:	4b43      	ldr	r3, [pc, #268]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	493f      	ldr	r1, [pc, #252]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
 80010be:	e015      	b.n	80010ec <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c0:	4b3e      	ldr	r3, [pc, #248]	; (80011bc <HAL_RCC_OscConfig+0x2a8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c6:	f7ff fa83 	bl	80005d0 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ce:	f7ff fa7f 	bl	80005d0 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e150      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e0:	4b35      	ldr	r3, [pc, #212]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f0      	bne.n	80010ce <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d030      	beq.n	800115a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d016      	beq.n	800112e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <HAL_RCC_OscConfig+0x2ac>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001106:	f7ff fa63 	bl	80005d0 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800110e:	f7ff fa5f 	bl	80005d0 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e130      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8001122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x1fa>
 800112c:	e015      	b.n	800115a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_RCC_OscConfig+0x2ac>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001134:	f7ff fa4c 	bl	80005d0 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fa48 	bl	80005d0 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e119      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8001150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 809f 	beq.w	80012a6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10f      	bne.n	8001198 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 8001182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001186:	6413      	str	r3, [r2, #64]	; 0x40
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_RCC_OscConfig+0x2a4>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001194:	2301      	movs	r3, #1
 8001196:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_RCC_OscConfig+0x2b0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d120      	bne.n	80011e6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <HAL_RCC_OscConfig+0x2b0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_RCC_OscConfig+0x2b0>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011b0:	f7ff fa0e 	bl	80005d0 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b6:	e010      	b.n	80011da <HAL_RCC_OscConfig+0x2c6>
 80011b8:	40023800 	.word	0x40023800
 80011bc:	42470000 	.word	0x42470000
 80011c0:	42470e80 	.word	0x42470e80
 80011c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c8:	f7ff fa02 	bl	80005d0 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e0d3      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011da:	4b6c      	ldr	r3, [pc, #432]	; (800138c <HAL_RCC_OscConfig+0x478>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d106      	bne.n	80011fc <HAL_RCC_OscConfig+0x2e8>
 80011ee:	4b68      	ldr	r3, [pc, #416]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 80011f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f2:	4a67      	ldr	r2, [pc, #412]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6713      	str	r3, [r2, #112]	; 0x70
 80011fa:	e01c      	b.n	8001236 <HAL_RCC_OscConfig+0x322>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d10c      	bne.n	800121e <HAL_RCC_OscConfig+0x30a>
 8001204:	4b62      	ldr	r3, [pc, #392]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 8001206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001208:	4a61      	ldr	r2, [pc, #388]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6713      	str	r3, [r2, #112]	; 0x70
 8001210:	4b5f      	ldr	r3, [pc, #380]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001214:	4a5e      	ldr	r2, [pc, #376]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6713      	str	r3, [r2, #112]	; 0x70
 800121c:	e00b      	b.n	8001236 <HAL_RCC_OscConfig+0x322>
 800121e:	4b5c      	ldr	r3, [pc, #368]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 8001220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001222:	4a5b      	ldr	r2, [pc, #364]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	6713      	str	r3, [r2, #112]	; 0x70
 800122a:	4b59      	ldr	r3, [pc, #356]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 800122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122e:	4a58      	ldr	r2, [pc, #352]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 8001230:	f023 0304 	bic.w	r3, r3, #4
 8001234:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d015      	beq.n	800126a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123e:	f7ff f9c7 	bl	80005d0 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001244:	e00a      	b.n	800125c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff f9c3 	bl	80005d0 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f241 3288 	movw	r2, #5000	; 0x1388
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e092      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125c:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 800125e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0ee      	beq.n	8001246 <HAL_RCC_OscConfig+0x332>
 8001268:	e014      	b.n	8001294 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126a:	f7ff f9b1 	bl	80005d0 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff f9ad 	bl	80005d0 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e07c      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001288:	4b41      	ldr	r3, [pc, #260]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 800128a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1ee      	bne.n	8001272 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d105      	bne.n	80012a6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a3c      	ldr	r2, [pc, #240]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 80012a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d068      	beq.n	8001380 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012ae:	4b38      	ldr	r3, [pc, #224]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d060      	beq.n	800137c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d145      	bne.n	800134e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c2:	4b34      	ldr	r3, [pc, #208]	; (8001394 <HAL_RCC_OscConfig+0x480>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff f982 	bl	80005d0 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d0:	f7ff f97e 	bl	80005d0 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e04f      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e2:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69da      	ldr	r2, [r3, #28]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	019b      	lsls	r3, r3, #6
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	3b01      	subs	r3, #1
 8001308:	041b      	lsls	r3, r3, #16
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	061b      	lsls	r3, r3, #24
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	071b      	lsls	r3, r3, #28
 800131a:	491d      	ldr	r1, [pc, #116]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_RCC_OscConfig+0x480>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001326:	f7ff f953 	bl	80005d0 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800132e:	f7ff f94f 	bl	80005d0 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e020      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x41a>
 800134c:	e018      	b.n	8001380 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_RCC_OscConfig+0x480>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001354:	f7ff f93c 	bl	80005d0 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800135c:	f7ff f938 	bl	80005d0 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e009      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_RCC_OscConfig+0x47c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x448>
 800137a:	e001      	b.n	8001380 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40007000 	.word	0x40007000
 8001390:	40023800 	.word	0x40023800
 8001394:	42470060 	.word	0x42470060

08001398 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e056      	b.n	8001458 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d106      	bne.n	80013ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f001 f927 	bl	8002618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2202      	movs	r2, #2
 80013ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	ea42 0103 	orr.w	r1, r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	0c1b      	lsrs	r3, r3, #16
 8001428:	f003 0104 	and.w	r1, r3, #4
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	69da      	ldr	r2, [r3, #28]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001446:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e01d      	b.n	80014ae <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f001 f90e 	bl	80026a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3304      	adds	r3, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4610      	mov	r0, r2
 80014a0:	f000 f8d0 	bl	8001644 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e0b4      	b.n	800163c <HAL_TIM_PWM_ConfigChannel+0x184>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2202      	movs	r2, #2
 80014de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b0c      	cmp	r3, #12
 80014e6:	f200 809f 	bhi.w	8001628 <HAL_TIM_PWM_ConfigChannel+0x170>
 80014ea:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	08001525 	.word	0x08001525
 80014f4:	08001629 	.word	0x08001629
 80014f8:	08001629 	.word	0x08001629
 80014fc:	08001629 	.word	0x08001629
 8001500:	08001565 	.word	0x08001565
 8001504:	08001629 	.word	0x08001629
 8001508:	08001629 	.word	0x08001629
 800150c:	08001629 	.word	0x08001629
 8001510:	080015a7 	.word	0x080015a7
 8001514:	08001629 	.word	0x08001629
 8001518:	08001629 	.word	0x08001629
 800151c:	08001629 	.word	0x08001629
 8001520:	080015e7 	.word	0x080015e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f92a 	bl	8001784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699a      	ldr	r2, [r3, #24]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0208 	orr.w	r2, r2, #8
 800153e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0204 	bic.w	r2, r2, #4
 800154e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6999      	ldr	r1, [r3, #24]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	691a      	ldr	r2, [r3, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	619a      	str	r2, [r3, #24]
      break;
 8001562:	e062      	b.n	800162a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f97a 	bl	8001864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699a      	ldr	r2, [r3, #24]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800157e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800158e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6999      	ldr	r1, [r3, #24]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	021a      	lsls	r2, r3, #8
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	619a      	str	r2, [r3, #24]
      break;
 80015a4:	e041      	b.n	800162a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f9cf 	bl	8001950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	69da      	ldr	r2, [r3, #28]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0208 	orr.w	r2, r2, #8
 80015c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	69da      	ldr	r2, [r3, #28]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0204 	bic.w	r2, r2, #4
 80015d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	69d9      	ldr	r1, [r3, #28]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	61da      	str	r2, [r3, #28]
      break;
 80015e4:	e021      	b.n	800162a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fa23 	bl	8001a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	69da      	ldr	r2, [r3, #28]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	69da      	ldr	r2, [r3, #28]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	69d9      	ldr	r1, [r3, #28]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	61da      	str	r2, [r3, #28]
      break;
 8001626:	e000      	b.n	800162a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001628:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a40      	ldr	r2, [pc, #256]	; (8001758 <TIM_Base_SetConfig+0x114>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d013      	beq.n	8001684 <TIM_Base_SetConfig+0x40>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001662:	d00f      	beq.n	8001684 <TIM_Base_SetConfig+0x40>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a3d      	ldr	r2, [pc, #244]	; (800175c <TIM_Base_SetConfig+0x118>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d00b      	beq.n	8001684 <TIM_Base_SetConfig+0x40>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a3c      	ldr	r2, [pc, #240]	; (8001760 <TIM_Base_SetConfig+0x11c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d007      	beq.n	8001684 <TIM_Base_SetConfig+0x40>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a3b      	ldr	r2, [pc, #236]	; (8001764 <TIM_Base_SetConfig+0x120>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d003      	beq.n	8001684 <TIM_Base_SetConfig+0x40>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a3a      	ldr	r2, [pc, #232]	; (8001768 <TIM_Base_SetConfig+0x124>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d108      	bne.n	8001696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800168a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a2f      	ldr	r2, [pc, #188]	; (8001758 <TIM_Base_SetConfig+0x114>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d02b      	beq.n	80016f6 <TIM_Base_SetConfig+0xb2>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a4:	d027      	beq.n	80016f6 <TIM_Base_SetConfig+0xb2>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a2c      	ldr	r2, [pc, #176]	; (800175c <TIM_Base_SetConfig+0x118>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d023      	beq.n	80016f6 <TIM_Base_SetConfig+0xb2>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a2b      	ldr	r2, [pc, #172]	; (8001760 <TIM_Base_SetConfig+0x11c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d01f      	beq.n	80016f6 <TIM_Base_SetConfig+0xb2>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a2a      	ldr	r2, [pc, #168]	; (8001764 <TIM_Base_SetConfig+0x120>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01b      	beq.n	80016f6 <TIM_Base_SetConfig+0xb2>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a29      	ldr	r2, [pc, #164]	; (8001768 <TIM_Base_SetConfig+0x124>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d017      	beq.n	80016f6 <TIM_Base_SetConfig+0xb2>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a28      	ldr	r2, [pc, #160]	; (800176c <TIM_Base_SetConfig+0x128>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <TIM_Base_SetConfig+0xb2>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a27      	ldr	r2, [pc, #156]	; (8001770 <TIM_Base_SetConfig+0x12c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00f      	beq.n	80016f6 <TIM_Base_SetConfig+0xb2>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a26      	ldr	r2, [pc, #152]	; (8001774 <TIM_Base_SetConfig+0x130>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00b      	beq.n	80016f6 <TIM_Base_SetConfig+0xb2>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a25      	ldr	r2, [pc, #148]	; (8001778 <TIM_Base_SetConfig+0x134>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d007      	beq.n	80016f6 <TIM_Base_SetConfig+0xb2>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a24      	ldr	r2, [pc, #144]	; (800177c <TIM_Base_SetConfig+0x138>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d003      	beq.n	80016f6 <TIM_Base_SetConfig+0xb2>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a23      	ldr	r2, [pc, #140]	; (8001780 <TIM_Base_SetConfig+0x13c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d108      	bne.n	8001708 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <TIM_Base_SetConfig+0x114>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d003      	beq.n	800173c <TIM_Base_SetConfig+0xf8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <TIM_Base_SetConfig+0x124>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d103      	bne.n	8001744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	615a      	str	r2, [r3, #20]
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40010000 	.word	0x40010000
 800175c:	40000400 	.word	0x40000400
 8001760:	40000800 	.word	0x40000800
 8001764:	40000c00 	.word	0x40000c00
 8001768:	40010400 	.word	0x40010400
 800176c:	40014000 	.word	0x40014000
 8001770:	40014400 	.word	0x40014400
 8001774:	40014800 	.word	0x40014800
 8001778:	40001800 	.word	0x40001800
 800177c:	40001c00 	.word	0x40001c00
 8001780:	40002000 	.word	0x40002000

08001784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	f023 0201 	bic.w	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f023 0303 	bic.w	r3, r3, #3
 80017ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f023 0302 	bic.w	r3, r3, #2
 80017cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a20      	ldr	r2, [pc, #128]	; (800185c <TIM_OC1_SetConfig+0xd8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d003      	beq.n	80017e8 <TIM_OC1_SetConfig+0x64>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <TIM_OC1_SetConfig+0xdc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d10c      	bne.n	8001802 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f023 0308 	bic.w	r3, r3, #8
 80017ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a15      	ldr	r2, [pc, #84]	; (800185c <TIM_OC1_SetConfig+0xd8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d003      	beq.n	8001812 <TIM_OC1_SetConfig+0x8e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <TIM_OC1_SetConfig+0xdc>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d111      	bne.n	8001836 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	621a      	str	r2, [r3, #32]
}
 8001850:	bf00      	nop
 8001852:	371c      	adds	r7, #28
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40010000 	.word	0x40010000
 8001860:	40010400 	.word	0x40010400

08001864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	f023 0210 	bic.w	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800189a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f023 0320 	bic.w	r3, r3, #32
 80018ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a22      	ldr	r2, [pc, #136]	; (8001948 <TIM_OC2_SetConfig+0xe4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d003      	beq.n	80018cc <TIM_OC2_SetConfig+0x68>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a21      	ldr	r2, [pc, #132]	; (800194c <TIM_OC2_SetConfig+0xe8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d10d      	bne.n	80018e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4313      	orrs	r3, r2
 80018de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <TIM_OC2_SetConfig+0xe4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d003      	beq.n	80018f8 <TIM_OC2_SetConfig+0x94>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a16      	ldr	r2, [pc, #88]	; (800194c <TIM_OC2_SetConfig+0xe8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d113      	bne.n	8001920 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	621a      	str	r2, [r3, #32]
}
 800193a:	bf00      	nop
 800193c:	371c      	adds	r7, #28
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40010000 	.word	0x40010000
 800194c:	40010400 	.word	0x40010400

08001950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800197e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 0303 	bic.w	r3, r3, #3
 8001986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <TIM_OC3_SetConfig+0xe0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d003      	beq.n	80019b6 <TIM_OC3_SetConfig+0x66>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <TIM_OC3_SetConfig+0xe4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10d      	bne.n	80019d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <TIM_OC3_SetConfig+0xe0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d003      	beq.n	80019e2 <TIM_OC3_SetConfig+0x92>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a15      	ldr	r2, [pc, #84]	; (8001a34 <TIM_OC3_SetConfig+0xe4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d113      	bne.n	8001a0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	621a      	str	r2, [r3, #32]
}
 8001a24:	bf00      	nop
 8001a26:	371c      	adds	r7, #28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40010000 	.word	0x40010000
 8001a34:	40010400 	.word	0x40010400

08001a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	031b      	lsls	r3, r3, #12
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <TIM_OC4_SetConfig+0xa4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d003      	beq.n	8001aa0 <TIM_OC4_SetConfig+0x68>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <TIM_OC4_SetConfig+0xa8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d109      	bne.n	8001ab4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	019b      	lsls	r3, r3, #6
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	621a      	str	r2, [r3, #32]
}
 8001ace:	bf00      	nop
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40010000 	.word	0x40010000
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e032      	b.n	8001b62 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b34:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e03d      	b.n	8001c06 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e03f      	b.n	8001ca4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d106      	bne.n	8001c3e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fdd1 	bl	80027e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2224      	movs	r2, #36	; 0x24
 8001c42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c54:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f828 	bl	8001cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c7a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c8a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2220      	movs	r2, #32
 8001c96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cac:	b5b0      	push	{r4, r5, r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001cec:	f023 030c 	bic.w	r3, r3, #12
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	68f9      	ldr	r1, [r7, #12]
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d18:	f040 80e4 	bne.w	8001ee4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4aab      	ldr	r2, [pc, #684]	; (8001fd0 <UART_SetConfig+0x324>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d004      	beq.n	8001d30 <UART_SetConfig+0x84>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4aaa      	ldr	r2, [pc, #680]	; (8001fd4 <UART_SetConfig+0x328>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d16c      	bne.n	8001e0a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d30:	f7ff f8dc 	bl	8000eec <HAL_RCC_GetPCLK2Freq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009a      	lsls	r2, r3, #2
 8001d3e:	441a      	add	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	4aa3      	ldr	r2, [pc, #652]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	095b      	lsrs	r3, r3, #5
 8001d52:	011c      	lsls	r4, r3, #4
 8001d54:	f7ff f8ca 	bl	8000eec <HAL_RCC_GetPCLK2Freq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	009a      	lsls	r2, r3, #2
 8001d62:	441a      	add	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fbb2 f5f3 	udiv	r5, r2, r3
 8001d6e:	f7ff f8bd 	bl	8000eec <HAL_RCC_GetPCLK2Freq>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	009a      	lsls	r2, r3, #2
 8001d7c:	441a      	add	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	4a93      	ldr	r2, [pc, #588]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2264      	movs	r2, #100	; 0x64
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	1aeb      	subs	r3, r5, r3
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	3332      	adds	r3, #50	; 0x32
 8001d9c:	4a8e      	ldr	r2, [pc, #568]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001daa:	441c      	add	r4, r3
 8001dac:	f7ff f89e 	bl	8000eec <HAL_RCC_GetPCLK2Freq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	009a      	lsls	r2, r3, #2
 8001dba:	441a      	add	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fbb2 f5f3 	udiv	r5, r2, r3
 8001dc6:	f7ff f891 	bl	8000eec <HAL_RCC_GetPCLK2Freq>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009a      	lsls	r2, r3, #2
 8001dd4:	441a      	add	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	4a7d      	ldr	r2, [pc, #500]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2264      	movs	r2, #100	; 0x64
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	1aeb      	subs	r3, r5, r3
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	3332      	adds	r3, #50	; 0x32
 8001df4:	4a78      	ldr	r2, [pc, #480]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	f003 0207 	and.w	r2, r3, #7
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4422      	add	r2, r4
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	e154      	b.n	80020b4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e0a:	f7ff f85b 	bl	8000ec4 <HAL_RCC_GetPCLK1Freq>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	009a      	lsls	r2, r3, #2
 8001e18:	441a      	add	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	4a6c      	ldr	r2, [pc, #432]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	011c      	lsls	r4, r3, #4
 8001e2e:	f7ff f849 	bl	8000ec4 <HAL_RCC_GetPCLK1Freq>
 8001e32:	4602      	mov	r2, r0
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	009a      	lsls	r2, r3, #2
 8001e3c:	441a      	add	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fbb2 f5f3 	udiv	r5, r2, r3
 8001e48:	f7ff f83c 	bl	8000ec4 <HAL_RCC_GetPCLK1Freq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	009a      	lsls	r2, r3, #2
 8001e56:	441a      	add	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4a5d      	ldr	r2, [pc, #372]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	2264      	movs	r2, #100	; 0x64
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	1aeb      	subs	r3, r5, r3
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	3332      	adds	r3, #50	; 0x32
 8001e76:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e84:	441c      	add	r4, r3
 8001e86:	f7ff f81d 	bl	8000ec4 <HAL_RCC_GetPCLK1Freq>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	009a      	lsls	r2, r3, #2
 8001e94:	441a      	add	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001ea0:	f7ff f810 	bl	8000ec4 <HAL_RCC_GetPCLK1Freq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	009a      	lsls	r2, r3, #2
 8001eae:	441a      	add	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4a47      	ldr	r2, [pc, #284]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	2264      	movs	r2, #100	; 0x64
 8001ec4:	fb02 f303 	mul.w	r3, r2, r3
 8001ec8:	1aeb      	subs	r3, r5, r3
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	3332      	adds	r3, #50	; 0x32
 8001ece:	4a42      	ldr	r2, [pc, #264]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	095b      	lsrs	r3, r3, #5
 8001ed6:	f003 0207 	and.w	r2, r3, #7
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4422      	add	r2, r4
 8001ee0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001ee2:	e0e7      	b.n	80020b4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a39      	ldr	r2, [pc, #228]	; (8001fd0 <UART_SetConfig+0x324>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d004      	beq.n	8001ef8 <UART_SetConfig+0x24c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a38      	ldr	r2, [pc, #224]	; (8001fd4 <UART_SetConfig+0x328>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d171      	bne.n	8001fdc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ef8:	f7fe fff8 	bl	8000eec <HAL_RCC_GetPCLK2Freq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	009a      	lsls	r2, r3, #2
 8001f06:	441a      	add	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4a31      	ldr	r2, [pc, #196]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	011c      	lsls	r4, r3, #4
 8001f1c:	f7fe ffe6 	bl	8000eec <HAL_RCC_GetPCLK2Freq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	009a      	lsls	r2, r3, #2
 8001f2a:	441a      	add	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f36:	f7fe ffd9 	bl	8000eec <HAL_RCC_GetPCLK2Freq>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	009a      	lsls	r2, r3, #2
 8001f44:	441a      	add	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	2264      	movs	r2, #100	; 0x64
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	1aeb      	subs	r3, r5, r3
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	3332      	adds	r3, #50	; 0x32
 8001f64:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f70:	441c      	add	r4, r3
 8001f72:	f7fe ffbb 	bl	8000eec <HAL_RCC_GetPCLK2Freq>
 8001f76:	4602      	mov	r2, r0
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009a      	lsls	r2, r3, #2
 8001f80:	441a      	add	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f8c:	f7fe ffae 	bl	8000eec <HAL_RCC_GetPCLK2Freq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	009a      	lsls	r2, r3, #2
 8001f9a:	441a      	add	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	095b      	lsrs	r3, r3, #5
 8001fae:	2264      	movs	r2, #100	; 0x64
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	1aeb      	subs	r3, r5, r3
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	3332      	adds	r3, #50	; 0x32
 8001fba:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <UART_SetConfig+0x32c>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	f003 020f 	and.w	r2, r3, #15
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4422      	add	r2, r4
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	e071      	b.n	80020b4 <UART_SetConfig+0x408>
 8001fd0:	40011000 	.word	0x40011000
 8001fd4:	40011400 	.word	0x40011400
 8001fd8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001fdc:	f7fe ff72 	bl	8000ec4 <HAL_RCC_GetPCLK1Freq>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009a      	lsls	r2, r3, #2
 8001fea:	441a      	add	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4a31      	ldr	r2, [pc, #196]	; (80020bc <UART_SetConfig+0x410>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	011c      	lsls	r4, r3, #4
 8002000:	f7fe ff60 	bl	8000ec4 <HAL_RCC_GetPCLK1Freq>
 8002004:	4602      	mov	r2, r0
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	009a      	lsls	r2, r3, #2
 800200e:	441a      	add	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	fbb2 f5f3 	udiv	r5, r2, r3
 800201a:	f7fe ff53 	bl	8000ec4 <HAL_RCC_GetPCLK1Freq>
 800201e:	4602      	mov	r2, r0
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	009a      	lsls	r2, r3, #2
 8002028:	441a      	add	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	4a21      	ldr	r2, [pc, #132]	; (80020bc <UART_SetConfig+0x410>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2264      	movs	r2, #100	; 0x64
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	1aeb      	subs	r3, r5, r3
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	3332      	adds	r3, #50	; 0x32
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <UART_SetConfig+0x410>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002054:	441c      	add	r4, r3
 8002056:	f7fe ff35 	bl	8000ec4 <HAL_RCC_GetPCLK1Freq>
 800205a:	4602      	mov	r2, r0
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	009a      	lsls	r2, r3, #2
 8002064:	441a      	add	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002070:	f7fe ff28 	bl	8000ec4 <HAL_RCC_GetPCLK1Freq>
 8002074:	4602      	mov	r2, r0
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009a      	lsls	r2, r3, #2
 800207e:	441a      	add	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <UART_SetConfig+0x410>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	2264      	movs	r2, #100	; 0x64
 8002094:	fb02 f303 	mul.w	r3, r2, r3
 8002098:	1aeb      	subs	r3, r5, r3
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	3332      	adds	r3, #50	; 0x32
 800209e:	4a07      	ldr	r2, [pc, #28]	; (80020bc <UART_SetConfig+0x410>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	f003 020f 	and.w	r2, r3, #15
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4422      	add	r2, r4
 80020b0:	609a      	str	r2, [r3, #8]
}
 80020b2:	e7ff      	b.n	80020b4 <UART_SetConfig+0x408>
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bdb0      	pop	{r4, r5, r7, pc}
 80020bc:	51eb851f 	.word	0x51eb851f

080020c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c4:	f7fe fa1e 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c8:	f000 f818 	bl	80020fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020cc:	f000 fa02 	bl	80024d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80020d0:	f000 f872 	bl	80021b8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80020d4:	f000 f8a6 	bl	8002224 <MX_TIM1_Init>
  MX_TIM8_Init();
 80020d8:	f000 f926 	bl	8002328 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80020dc:	f000 f9a6 	bl	800242c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80020e0:	f000 f9ce 	bl	8002480 <MX_USART6_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(500); // This is just to toggle pin to test that uC is working
 80020e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020e8:	f7fe fa7e 	bl	80005e8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, TX_On_Pin); // This should be removed later
 80020ec:	2101      	movs	r1, #1
 80020ee:	4802      	ldr	r0, [pc, #8]	; (80020f8 <main+0x38>)
 80020f0:	f7fe fd2d 	bl	8000b4e <HAL_GPIO_TogglePin>
	  HAL_Delay(500); // This is just to toggle pin to test that uC is working
 80020f4:	e7f6      	b.n	80020e4 <main+0x24>
 80020f6:	bf00      	nop
 80020f8:	40020000 	.word	0x40020000

080020fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b094      	sub	sp, #80	; 0x50
 8002100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	2234      	movs	r2, #52	; 0x34
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fc98 	bl	8002a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002110:	f107 0308 	add.w	r3, r7, #8
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	2300      	movs	r3, #0
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <SystemClock_Config+0xb4>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	4a21      	ldr	r2, [pc, #132]	; (80021b0 <SystemClock_Config+0xb4>)
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212e:	6413      	str	r3, [r2, #64]	; 0x40
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <SystemClock_Config+0xb4>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800213c:	2300      	movs	r3, #0
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <SystemClock_Config+0xb8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <SystemClock_Config+0xb8>)
 8002146:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <SystemClock_Config+0xb8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002158:	2302      	movs	r3, #2
 800215a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800215c:	2301      	movs	r3, #1
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002160:	2310      	movs	r3, #16
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002164:	2300      	movs	r3, #0
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fed1 	bl	8000f14 <HAL_RCC_OscConfig>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002178:	f000 fa1e 	bl	80025b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800217c:	230f      	movs	r3, #15
 800217e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fcf4 	bl	8000b84 <HAL_RCC_ClockConfig>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80021a2:	f000 fa09 	bl	80025b8 <Error_Handler>
  }
}
 80021a6:	bf00      	nop
 80021a8:	3750      	adds	r7, #80	; 0x50
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40007000 	.word	0x40007000

080021b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <MX_SPI1_Init+0x64>)
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <MX_SPI1_Init+0x68>)
 80021c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <MX_SPI1_Init+0x64>)
 80021c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <MX_SPI1_Init+0x64>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <MX_SPI1_Init+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <MX_SPI1_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <MX_SPI1_Init+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <MX_SPI1_Init+0x64>)
 80021e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <MX_SPI1_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <MX_SPI1_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <MX_SPI1_Init+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <MX_SPI1_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <MX_SPI1_Init+0x64>)
 8002204:	220a      	movs	r2, #10
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002208:	4804      	ldr	r0, [pc, #16]	; (800221c <MX_SPI1_Init+0x64>)
 800220a:	f7ff f8c5 	bl	8001398 <HAL_SPI_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002214:	f000 f9d0 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	2000012c 	.word	0x2000012c
 8002220:	40013000 	.word	0x40013000

08002224 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b092      	sub	sp, #72	; 0x48
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
 8002244:	615a      	str	r2, [r3, #20]
 8002246:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	2220      	movs	r2, #32
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fbf6 	bl	8002a40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002254:	4b32      	ldr	r3, [pc, #200]	; (8002320 <MX_TIM1_Init+0xfc>)
 8002256:	4a33      	ldr	r2, [pc, #204]	; (8002324 <MX_TIM1_Init+0x100>)
 8002258:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800225a:	4b31      	ldr	r3, [pc, #196]	; (8002320 <MX_TIM1_Init+0xfc>)
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002260:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <MX_TIM1_Init+0xfc>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <MX_TIM1_Init+0xfc>)
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226c:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <MX_TIM1_Init+0xfc>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002272:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <MX_TIM1_Init+0xfc>)
 8002274:	2200      	movs	r2, #0
 8002276:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002278:	4b29      	ldr	r3, [pc, #164]	; (8002320 <MX_TIM1_Init+0xfc>)
 800227a:	2200      	movs	r2, #0
 800227c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800227e:	4828      	ldr	r0, [pc, #160]	; (8002320 <MX_TIM1_Init+0xfc>)
 8002280:	f7ff f8ee 	bl	8001460 <HAL_TIM_PWM_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800228a:	f000 f995 	bl	80025b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002296:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800229a:	4619      	mov	r1, r3
 800229c:	4820      	ldr	r0, [pc, #128]	; (8002320 <MX_TIM1_Init+0xfc>)
 800229e:	f7ff fc21 	bl	8001ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80022a8:	f000 f986 	bl	80025b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ac:	2360      	movs	r3, #96	; 0x60
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022b8:	2300      	movs	r3, #0
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022c0:	2300      	movs	r3, #0
 80022c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022c4:	2300      	movs	r3, #0
 80022c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022cc:	2200      	movs	r2, #0
 80022ce:	4619      	mov	r1, r3
 80022d0:	4813      	ldr	r0, [pc, #76]	; (8002320 <MX_TIM1_Init+0xfc>)
 80022d2:	f7ff f8f1 	bl	80014b8 <HAL_TIM_PWM_ConfigChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80022dc:	f000 f96c 	bl	80025b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	4619      	mov	r1, r3
 8002302:	4807      	ldr	r0, [pc, #28]	; (8002320 <MX_TIM1_Init+0xfc>)
 8002304:	f7ff fc33 	bl	8001b6e <HAL_TIMEx_ConfigBreakDeadTime>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800230e:	f000 f953 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002312:	4803      	ldr	r0, [pc, #12]	; (8002320 <MX_TIM1_Init+0xfc>)
 8002314:	f000 fa00 	bl	8002718 <HAL_TIM_MspPostInit>

}
 8002318:	bf00      	nop
 800231a:	3748      	adds	r7, #72	; 0x48
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	200000ac 	.word	0x200000ac
 8002324:	40010000 	.word	0x40010000

08002328 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b092      	sub	sp, #72	; 0x48
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
 8002348:	615a      	str	r2, [r3, #20]
 800234a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	2220      	movs	r2, #32
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fb74 	bl	8002a40 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002358:	4b32      	ldr	r3, [pc, #200]	; (8002424 <MX_TIM8_Init+0xfc>)
 800235a:	4a33      	ldr	r2, [pc, #204]	; (8002428 <MX_TIM8_Init+0x100>)
 800235c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800235e:	4b31      	ldr	r3, [pc, #196]	; (8002424 <MX_TIM8_Init+0xfc>)
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002364:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <MX_TIM8_Init+0xfc>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 800236a:	4b2e      	ldr	r3, [pc, #184]	; (8002424 <MX_TIM8_Init+0xfc>)
 800236c:	2200      	movs	r2, #0
 800236e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002370:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <MX_TIM8_Init+0xfc>)
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002376:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <MX_TIM8_Init+0xfc>)
 8002378:	2200      	movs	r2, #0
 800237a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237c:	4b29      	ldr	r3, [pc, #164]	; (8002424 <MX_TIM8_Init+0xfc>)
 800237e:	2200      	movs	r2, #0
 8002380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002382:	4828      	ldr	r0, [pc, #160]	; (8002424 <MX_TIM8_Init+0xfc>)
 8002384:	f7ff f86c 	bl	8001460 <HAL_TIM_PWM_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 800238e:	f000 f913 	bl	80025b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800239a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800239e:	4619      	mov	r1, r3
 80023a0:	4820      	ldr	r0, [pc, #128]	; (8002424 <MX_TIM8_Init+0xfc>)
 80023a2:	f7ff fb9f 	bl	8001ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 80023ac:	f000 f904 	bl	80025b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023b0:	2360      	movs	r3, #96	; 0x60
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023bc:	2300      	movs	r3, #0
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d0:	2208      	movs	r2, #8
 80023d2:	4619      	mov	r1, r3
 80023d4:	4813      	ldr	r0, [pc, #76]	; (8002424 <MX_TIM8_Init+0xfc>)
 80023d6:	f7ff f86f 	bl	80014b8 <HAL_TIM_PWM_ConfigChannel>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 80023e0:	f000 f8ea 	bl	80025b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	4619      	mov	r1, r3
 8002406:	4807      	ldr	r0, [pc, #28]	; (8002424 <MX_TIM8_Init+0xfc>)
 8002408:	f7ff fbb1 	bl	8001b6e <HAL_TIMEx_ConfigBreakDeadTime>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002412:	f000 f8d1 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002416:	4803      	ldr	r0, [pc, #12]	; (8002424 <MX_TIM8_Init+0xfc>)
 8002418:	f000 f97e 	bl	8002718 <HAL_TIM_MspPostInit>

}
 800241c:	bf00      	nop
 800241e:	3748      	adds	r7, #72	; 0x48
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	2000002c 	.word	0x2000002c
 8002428:	40010400 	.word	0x40010400

0800242c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002432:	4a12      	ldr	r2, [pc, #72]	; (800247c <MX_USART1_UART_Init+0x50>)
 8002434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800243c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002452:	220c      	movs	r2, #12
 8002454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002464:	f7ff fbd5 	bl	8001c12 <HAL_UART_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800246e:	f000 f8a3 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000006c 	.word	0x2000006c
 800247c:	40011000 	.word	0x40011000

08002480 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <MX_USART6_UART_Init+0x50>)
 8002488:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 800248c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002490:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 80024a6:	220c      	movs	r2, #12
 80024a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 80024b8:	f7ff fbab 	bl	8001c12 <HAL_UART_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024c2:	f000 f879 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200000ec 	.word	0x200000ec
 80024d0:	40011400 	.word	0x40011400

080024d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024da:	f107 030c 	add.w	r3, r7, #12
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <MX_GPIO_Init+0xd8>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a2e      	ldr	r2, [pc, #184]	; (80025ac <MX_GPIO_Init+0xd8>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <MX_GPIO_Init+0xd8>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	4b28      	ldr	r3, [pc, #160]	; (80025ac <MX_GPIO_Init+0xd8>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a27      	ldr	r2, [pc, #156]	; (80025ac <MX_GPIO_Init+0xd8>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b25      	ldr	r3, [pc, #148]	; (80025ac <MX_GPIO_Init+0xd8>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	4b21      	ldr	r3, [pc, #132]	; (80025ac <MX_GPIO_Init+0xd8>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a20      	ldr	r2, [pc, #128]	; (80025ac <MX_GPIO_Init+0xd8>)
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <MX_GPIO_Init+0xd8>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TX_On_Pin|ADCSync_Pin, GPIO_PIN_RESET);
 800253e:	2200      	movs	r2, #0
 8002540:	2103      	movs	r1, #3
 8002542:	481b      	ldr	r0, [pc, #108]	; (80025b0 <MX_GPIO_Init+0xdc>)
 8002544:	f7fe faea 	bl	8000b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FPGA_Config_GPIO_Port, FPGA_Config_Pin, GPIO_PIN_RESET);
 8002548:	2200      	movs	r2, #0
 800254a:	2110      	movs	r1, #16
 800254c:	4819      	ldr	r0, [pc, #100]	; (80025b4 <MX_GPIO_Init+0xe0>)
 800254e:	f7fe fae5 	bl	8000b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TX_On_Pin ADCSync_Pin */
  GPIO_InitStruct.Pin = TX_On_Pin|ADCSync_Pin;
 8002552:	2303      	movs	r3, #3
 8002554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002556:	2301      	movs	r3, #1
 8002558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f107 030c 	add.w	r3, r7, #12
 8002566:	4619      	mov	r1, r3
 8002568:	4811      	ldr	r0, [pc, #68]	; (80025b0 <MX_GPIO_Init+0xdc>)
 800256a:	f7fe f945 	bl	80007f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FPGA_Config_Pin */
  GPIO_InitStruct.Pin = FPGA_Config_Pin;
 800256e:	2310      	movs	r3, #16
 8002570:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FPGA_Config_GPIO_Port, &GPIO_InitStruct);
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	4619      	mov	r1, r3
 8002584:	480b      	ldr	r0, [pc, #44]	; (80025b4 <MX_GPIO_Init+0xe0>)
 8002586:	f7fe f937 	bl	80007f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FPGA_CDone_Pin */
  GPIO_InitStruct.Pin = FPGA_CDone_Pin;
 800258a:	2320      	movs	r3, #32
 800258c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FPGA_CDone_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	4619      	mov	r1, r3
 800259c:	4805      	ldr	r0, [pc, #20]	; (80025b4 <MX_GPIO_Init+0xe0>)
 800259e:	f7fe f92b 	bl	80007f8 <HAL_GPIO_Init>

}
 80025a2:	bf00      	nop
 80025a4:	3720      	adds	r7, #32
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40020800 	.word	0x40020800

080025b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <HAL_MspInit+0x4c>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_MspInit+0x4c>)
 80025d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_MspInit+0x4c>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_MspInit+0x4c>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <HAL_MspInit+0x4c>)
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_MspInit+0x4c>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800

08002618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a19      	ldr	r2, [pc, #100]	; (800269c <HAL_SPI_MspInit+0x84>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d12b      	bne.n	8002692 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_SPI_MspInit+0x88>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <HAL_SPI_MspInit+0x88>)
 8002644:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_SPI_MspInit+0x88>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_SPI_MspInit+0x88>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <HAL_SPI_MspInit+0x88>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_SPI_MspInit+0x88>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = FPGA_SS_Pin|FPGA_CLK_Pin|FPGA_MISO_Pin|FPGA_MOSI_Pin;
 8002672:	23f0      	movs	r3, #240	; 0xf0
 8002674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002682:	2305      	movs	r3, #5
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	4805      	ldr	r0, [pc, #20]	; (80026a4 <HAL_SPI_MspInit+0x8c>)
 800268e:	f7fe f8b3 	bl	80007f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002692:	bf00      	nop
 8002694:	3728      	adds	r7, #40	; 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40013000 	.word	0x40013000
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020000 	.word	0x40020000

080026a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a15      	ldr	r2, [pc, #84]	; (800270c <HAL_TIM_PWM_MspInit+0x64>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10e      	bne.n	80026d8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_TIM_PWM_MspInit+0x68>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a13      	ldr	r2, [pc, #76]	; (8002710 <HAL_TIM_PWM_MspInit+0x68>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_TIM_PWM_MspInit+0x68>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026d6:	e012      	b.n	80026fe <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <HAL_TIM_PWM_MspInit+0x6c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10d      	bne.n	80026fe <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_TIM_PWM_MspInit+0x68>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_TIM_PWM_MspInit+0x68>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6453      	str	r3, [r2, #68]	; 0x44
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_TIM_PWM_MspInit+0x68>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40010000 	.word	0x40010000
 8002710:	40023800 	.word	0x40023800
 8002714:	40010400 	.word	0x40010400

08002718 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a25      	ldr	r2, [pc, #148]	; (80027cc <HAL_TIM_MspPostInit+0xb4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d11f      	bne.n	800277a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_TIM_MspPostInit+0xb8>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <HAL_TIM_MspPostInit+0xb8>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <HAL_TIM_MspPostInit+0xb8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = Tx_C1_Pin;
 8002756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800275a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002768:	2301      	movs	r3, #1
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Tx_C1_GPIO_Port, &GPIO_InitStruct);
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4619      	mov	r1, r3
 8002772:	4818      	ldr	r0, [pc, #96]	; (80027d4 <HAL_TIM_MspPostInit+0xbc>)
 8002774:	f7fe f840 	bl	80007f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002778:	e023      	b.n	80027c2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <HAL_TIM_MspPostInit+0xc0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d11e      	bne.n	80027c2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_TIM_MspPostInit+0xb8>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_TIM_MspPostInit+0xb8>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	6313      	str	r3, [r2, #48]	; 0x30
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_TIM_MspPostInit+0xb8>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Tx_C2_Pin;
 80027a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80027b2:	2303      	movs	r3, #3
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Tx_C2_GPIO_Port, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	4807      	ldr	r0, [pc, #28]	; (80027dc <HAL_TIM_MspPostInit+0xc4>)
 80027be:	f7fe f81b 	bl	80007f8 <HAL_GPIO_Init>
}
 80027c2:	bf00      	nop
 80027c4:	3728      	adds	r7, #40	; 0x28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40010000 	.word	0x40010000
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40020000 	.word	0x40020000
 80027d8:	40010400 	.word	0x40010400
 80027dc:	40020800 	.word	0x40020800

080027e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	; 0x30
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a32      	ldr	r2, [pc, #200]	; (80028c8 <HAL_UART_MspInit+0xe8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d12d      	bne.n	800285e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_UART_MspInit+0xec>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a30      	ldr	r2, [pc, #192]	; (80028cc <HAL_UART_MspInit+0xec>)
 800280c:	f043 0310 	orr.w	r3, r3, #16
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b2e      	ldr	r3, [pc, #184]	; (80028cc <HAL_UART_MspInit+0xec>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_UART_MspInit+0xec>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a29      	ldr	r2, [pc, #164]	; (80028cc <HAL_UART_MspInit+0xec>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b27      	ldr	r3, [pc, #156]	; (80028cc <HAL_UART_MspInit+0xec>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800283a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002844:	2301      	movs	r3, #1
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800284c:	2307      	movs	r3, #7
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	481e      	ldr	r0, [pc, #120]	; (80028d0 <HAL_UART_MspInit+0xf0>)
 8002858:	f7fd ffce 	bl	80007f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800285c:	e030      	b.n	80028c0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <HAL_UART_MspInit+0xf4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d12b      	bne.n	80028c0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_UART_MspInit+0xec>)
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	4a16      	ldr	r2, [pc, #88]	; (80028cc <HAL_UART_MspInit+0xec>)
 8002872:	f043 0320 	orr.w	r3, r3, #32
 8002876:	6453      	str	r3, [r2, #68]	; 0x44
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <HAL_UART_MspInit+0xec>)
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_UART_MspInit+0xec>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_UART_MspInit+0xec>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	6313      	str	r3, [r2, #48]	; 0x30
 8002894:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_UART_MspInit+0xec>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = dataOut_Tx_Pin|dataOut_Rx_Pin;
 80028a0:	23c0      	movs	r3, #192	; 0xc0
 80028a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a8:	2301      	movs	r3, #1
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028b0:	2308      	movs	r3, #8
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	4619      	mov	r1, r3
 80028ba:	4807      	ldr	r0, [pc, #28]	; (80028d8 <HAL_UART_MspInit+0xf8>)
 80028bc:	f7fd ff9c 	bl	80007f8 <HAL_GPIO_Init>
}
 80028c0:	bf00      	nop
 80028c2:	3730      	adds	r7, #48	; 0x30
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40011000 	.word	0x40011000
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40011400 	.word	0x40011400
 80028d8:	40020800 	.word	0x40020800

080028dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ee:	e7fe      	b.n	80028ee <HardFault_Handler+0x4>

080028f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <MemManage_Handler+0x4>

080028f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <BusFault_Handler+0x4>

080028fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002900:	e7fe      	b.n	8002900 <UsageFault_Handler+0x4>

08002902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002930:	f7fd fe3a 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}

08002938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800293c:	4b16      	ldr	r3, [pc, #88]	; (8002998 <SystemInit+0x60>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	4a15      	ldr	r2, [pc, #84]	; (8002998 <SystemInit+0x60>)
 8002944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <SystemInit+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a12      	ldr	r2, [pc, #72]	; (800299c <SystemInit+0x64>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002958:	4b10      	ldr	r3, [pc, #64]	; (800299c <SystemInit+0x64>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800295e:	4b0f      	ldr	r3, [pc, #60]	; (800299c <SystemInit+0x64>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a0e      	ldr	r2, [pc, #56]	; (800299c <SystemInit+0x64>)
 8002964:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <SystemInit+0x64>)
 8002970:	4a0b      	ldr	r2, [pc, #44]	; (80029a0 <SystemInit+0x68>)
 8002972:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <SystemInit+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a08      	ldr	r2, [pc, #32]	; (800299c <SystemInit+0x64>)
 800297a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800297e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <SystemInit+0x64>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <SystemInit+0x60>)
 8002988:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800298c:	609a      	str	r2, [r3, #8]
#endif
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00
 800299c:	40023800 	.word	0x40023800
 80029a0:	24003010 	.word	0x24003010

080029a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80029a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80029a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029aa:	e003      	b.n	80029b4 <LoopCopyDataInit>

080029ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029b2:	3104      	adds	r1, #4

080029b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029b4:	480b      	ldr	r0, [pc, #44]	; (80029e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029b6:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029bc:	d3f6      	bcc.n	80029ac <CopyDataInit>
  ldr  r2, =_sbss
 80029be:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029c0:	e002      	b.n	80029c8 <LoopFillZerobss>

080029c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80029c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029c4:	f842 3b04 	str.w	r3, [r2], #4

080029c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029cc:	d3f9      	bcc.n	80029c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029ce:	f7ff ffb3 	bl	8002938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029d2:	f000 f811 	bl	80029f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029d6:	f7ff fb73 	bl	80020c0 <main>
  bx  lr    
 80029da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80029dc:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80029e0:	08002a90 	.word	0x08002a90
  ldr  r0, =_sdata
 80029e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029e8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80029ec:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80029f0:	20000184 	.word	0x20000184

080029f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029f4:	e7fe      	b.n	80029f4 <ADC_IRQHandler>
	...

080029f8 <__libc_init_array>:
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	4e0d      	ldr	r6, [pc, #52]	; (8002a30 <__libc_init_array+0x38>)
 80029fc:	4c0d      	ldr	r4, [pc, #52]	; (8002a34 <__libc_init_array+0x3c>)
 80029fe:	1ba4      	subs	r4, r4, r6
 8002a00:	10a4      	asrs	r4, r4, #2
 8002a02:	2500      	movs	r5, #0
 8002a04:	42a5      	cmp	r5, r4
 8002a06:	d109      	bne.n	8002a1c <__libc_init_array+0x24>
 8002a08:	4e0b      	ldr	r6, [pc, #44]	; (8002a38 <__libc_init_array+0x40>)
 8002a0a:	4c0c      	ldr	r4, [pc, #48]	; (8002a3c <__libc_init_array+0x44>)
 8002a0c:	f000 f820 	bl	8002a50 <_init>
 8002a10:	1ba4      	subs	r4, r4, r6
 8002a12:	10a4      	asrs	r4, r4, #2
 8002a14:	2500      	movs	r5, #0
 8002a16:	42a5      	cmp	r5, r4
 8002a18:	d105      	bne.n	8002a26 <__libc_init_array+0x2e>
 8002a1a:	bd70      	pop	{r4, r5, r6, pc}
 8002a1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a20:	4798      	blx	r3
 8002a22:	3501      	adds	r5, #1
 8002a24:	e7ee      	b.n	8002a04 <__libc_init_array+0xc>
 8002a26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a2a:	4798      	blx	r3
 8002a2c:	3501      	adds	r5, #1
 8002a2e:	e7f2      	b.n	8002a16 <__libc_init_array+0x1e>
 8002a30:	08002a88 	.word	0x08002a88
 8002a34:	08002a88 	.word	0x08002a88
 8002a38:	08002a88 	.word	0x08002a88
 8002a3c:	08002a8c 	.word	0x08002a8c

08002a40 <memset>:
 8002a40:	4402      	add	r2, r0
 8002a42:	4603      	mov	r3, r0
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d100      	bne.n	8002a4a <memset+0xa>
 8002a48:	4770      	bx	lr
 8002a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a4e:	e7f9      	b.n	8002a44 <memset+0x4>

08002a50 <_init>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	bf00      	nop
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr

08002a5c <_fini>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	bf00      	nop
 8002a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a62:	bc08      	pop	{r3}
 8002a64:	469e      	mov	lr, r3
 8002a66:	4770      	bx	lr
