
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d0c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ed0  08002ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ee8  08002ee8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ee8  08002ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ef0  08002ef0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ef0  08002ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ef4  08002ef4  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08002f04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08002f04  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5e1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001923  00000000  00000000  0002b61d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d48  00000000  00000000  0002cf40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  0002dc88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ec39  00000000  00000000  0002e8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009347  00000000  00000000  0004d531  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000be115  00000000  00000000  00056878  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011498d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003844  00000000  00000000  00114a08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002eb8 	.word	0x08002eb8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002eb8 	.word	0x08002eb8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f90d 	bl	800074c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f002 fa7a 	bl	8002a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f917 	bl	800079a <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f8ed 	bl	8000762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000028 	.word	0x20000028

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028

080005e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <__NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000718:	d301      	bcc.n	800071e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2301      	movs	r3, #1
 800071c:	e00f      	b.n	800073e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <SysTick_Config+0x40>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000726:	210f      	movs	r1, #15
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f7ff ff8e 	bl	800064c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SysTick_Config+0x40>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <SysTick_Config+0x40>)
 8000738:	2207      	movs	r2, #7
 800073a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010

0800074c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff47 	bl	80005e8 <__NVIC_SetPriorityGrouping>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000762:	b580      	push	{r7, lr}
 8000764:	b086      	sub	sp, #24
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000774:	f7ff ff5c 	bl	8000630 <__NVIC_GetPriorityGrouping>
 8000778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	6978      	ldr	r0, [r7, #20]
 8000780:	f7ff ff8e 	bl	80006a0 <NVIC_EncodePriority>
 8000784:	4602      	mov	r2, r0
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff5d 	bl	800064c <__NVIC_SetPriority>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff ffb0 	bl	8000708 <SysTick_Config>
 80007a8:	4603      	mov	r3, r0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
 80007ce:	e165      	b.n	8000a9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007d0:	2201      	movs	r2, #1
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4013      	ands	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	f040 8154 	bne.w	8000a96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d003      	beq.n	80007fe <HAL_GPIO_Init+0x4a>
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	2b12      	cmp	r3, #18
 80007fc:	d123      	bne.n	8000846 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	08da      	lsrs	r2, r3, #3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3208      	adds	r2, #8
 8000806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800080a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	220f      	movs	r2, #15
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	4013      	ands	r3, r2
 8000820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	691a      	ldr	r2, [r3, #16]
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	f003 0307 	and.w	r3, r3, #7
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	4313      	orrs	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	08da      	lsrs	r2, r3, #3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3208      	adds	r2, #8
 8000840:	69b9      	ldr	r1, [r7, #24]
 8000842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	2203      	movs	r2, #3
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43db      	mvns	r3, r3
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	4013      	ands	r3, r2
 800085c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f003 0203 	and.w	r2, r3, #3
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4313      	orrs	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	69ba      	ldr	r2, [r7, #24]
 8000878:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d00b      	beq.n	800089a <HAL_GPIO_Init+0xe6>
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b02      	cmp	r3, #2
 8000888:	d007      	beq.n	800089a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800088e:	2b11      	cmp	r3, #17
 8000890:	d003      	beq.n	800089a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b12      	cmp	r3, #18
 8000898:	d130      	bne.n	80008fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	2203      	movs	r2, #3
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	4013      	ands	r3, r2
 80008b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	68da      	ldr	r2, [r3, #12]
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008d0:	2201      	movs	r2, #1
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4013      	ands	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	091b      	lsrs	r3, r3, #4
 80008e6:	f003 0201 	and.w	r2, r3, #1
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	2203      	movs	r2, #3
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	4013      	ands	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	689a      	ldr	r2, [r3, #8]
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	4313      	orrs	r3, r2
 8000924:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 80ae 	beq.w	8000a96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b5c      	ldr	r3, [pc, #368]	; (8000ab0 <HAL_GPIO_Init+0x2fc>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a5b      	ldr	r2, [pc, #364]	; (8000ab0 <HAL_GPIO_Init+0x2fc>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b59      	ldr	r3, [pc, #356]	; (8000ab0 <HAL_GPIO_Init+0x2fc>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000956:	4a57      	ldr	r2, [pc, #348]	; (8000ab4 <HAL_GPIO_Init+0x300>)
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	3302      	adds	r3, #2
 800095e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	220f      	movs	r2, #15
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	4013      	ands	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a4e      	ldr	r2, [pc, #312]	; (8000ab8 <HAL_GPIO_Init+0x304>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d025      	beq.n	80009ce <HAL_GPIO_Init+0x21a>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a4d      	ldr	r2, [pc, #308]	; (8000abc <HAL_GPIO_Init+0x308>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d01f      	beq.n	80009ca <HAL_GPIO_Init+0x216>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a4c      	ldr	r2, [pc, #304]	; (8000ac0 <HAL_GPIO_Init+0x30c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d019      	beq.n	80009c6 <HAL_GPIO_Init+0x212>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a4b      	ldr	r2, [pc, #300]	; (8000ac4 <HAL_GPIO_Init+0x310>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d013      	beq.n	80009c2 <HAL_GPIO_Init+0x20e>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a4a      	ldr	r2, [pc, #296]	; (8000ac8 <HAL_GPIO_Init+0x314>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d00d      	beq.n	80009be <HAL_GPIO_Init+0x20a>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a49      	ldr	r2, [pc, #292]	; (8000acc <HAL_GPIO_Init+0x318>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d007      	beq.n	80009ba <HAL_GPIO_Init+0x206>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a48      	ldr	r2, [pc, #288]	; (8000ad0 <HAL_GPIO_Init+0x31c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d101      	bne.n	80009b6 <HAL_GPIO_Init+0x202>
 80009b2:	2306      	movs	r3, #6
 80009b4:	e00c      	b.n	80009d0 <HAL_GPIO_Init+0x21c>
 80009b6:	2307      	movs	r3, #7
 80009b8:	e00a      	b.n	80009d0 <HAL_GPIO_Init+0x21c>
 80009ba:	2305      	movs	r3, #5
 80009bc:	e008      	b.n	80009d0 <HAL_GPIO_Init+0x21c>
 80009be:	2304      	movs	r3, #4
 80009c0:	e006      	b.n	80009d0 <HAL_GPIO_Init+0x21c>
 80009c2:	2303      	movs	r3, #3
 80009c4:	e004      	b.n	80009d0 <HAL_GPIO_Init+0x21c>
 80009c6:	2302      	movs	r3, #2
 80009c8:	e002      	b.n	80009d0 <HAL_GPIO_Init+0x21c>
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <HAL_GPIO_Init+0x21c>
 80009ce:	2300      	movs	r3, #0
 80009d0:	69fa      	ldr	r2, [r7, #28]
 80009d2:	f002 0203 	and.w	r2, r2, #3
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	4093      	lsls	r3, r2
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	4313      	orrs	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009e0:	4934      	ldr	r1, [pc, #208]	; (8000ab4 <HAL_GPIO_Init+0x300>)
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	089b      	lsrs	r3, r3, #2
 80009e6:	3302      	adds	r3, #2
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ee:	4b39      	ldr	r3, [pc, #228]	; (8000ad4 <HAL_GPIO_Init+0x320>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	43db      	mvns	r3, r3
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	4013      	ands	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a12:	4a30      	ldr	r2, [pc, #192]	; (8000ad4 <HAL_GPIO_Init+0x320>)
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a18:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <HAL_GPIO_Init+0x320>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	43db      	mvns	r3, r3
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	4013      	ands	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d003      	beq.n	8000a3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a3c:	4a25      	ldr	r2, [pc, #148]	; (8000ad4 <HAL_GPIO_Init+0x320>)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a42:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <HAL_GPIO_Init+0x320>)
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a66:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <HAL_GPIO_Init+0x320>)
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_GPIO_Init+0x320>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d003      	beq.n	8000a90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a90:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_GPIO_Init+0x320>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	61fb      	str	r3, [r7, #28]
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	2b0f      	cmp	r3, #15
 8000aa0:	f67f ae96 	bls.w	80007d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3724      	adds	r7, #36	; 0x24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40013800 	.word	0x40013800
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40021400 	.word	0x40021400
 8000ad0:	40021800 	.word	0x40021800
 8000ad4:	40013c00 	.word	0x40013c00

08000ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	807b      	strh	r3, [r7, #2]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ae8:	787b      	ldrb	r3, [r7, #1]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aee:	887a      	ldrh	r2, [r7, #2]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000af4:	e003      	b.n	8000afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000af6:	887b      	ldrh	r3, [r7, #2]
 8000af8:	041a      	lsls	r2, r3, #16
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	619a      	str	r2, [r3, #24]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e0ca      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b20:	4b67      	ldr	r3, [pc, #412]	; (8000cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 030f 	and.w	r3, r3, #15
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d90c      	bls.n	8000b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b2e:	4b64      	ldr	r3, [pc, #400]	; (8000cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b36:	4b62      	ldr	r3, [pc, #392]	; (8000cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d001      	beq.n	8000b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e0b6      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d020      	beq.n	8000b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d005      	beq.n	8000b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b60:	4b58      	ldr	r3, [pc, #352]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	4a57      	ldr	r2, [pc, #348]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0308 	and.w	r3, r3, #8
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d005      	beq.n	8000b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b78:	4b52      	ldr	r3, [pc, #328]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	4a51      	ldr	r2, [pc, #324]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b84:	4b4f      	ldr	r3, [pc, #316]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	494c      	ldr	r1, [pc, #304]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000b92:	4313      	orrs	r3, r2
 8000b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d044      	beq.n	8000c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d107      	bne.n	8000bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000baa:	4b46      	ldr	r3, [pc, #280]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d119      	bne.n	8000bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e07d      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d003      	beq.n	8000bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d107      	bne.n	8000bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bca:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d109      	bne.n	8000bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e06d      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bda:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e065      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bea:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f023 0203 	bic.w	r2, r3, #3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	4933      	ldr	r1, [pc, #204]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000bfc:	f7ff fce8 	bl	80005d0 <HAL_GetTick>
 8000c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c02:	e00a      	b.n	8000c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c04:	f7ff fce4 	bl	80005d0 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e04d      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 020c 	and.w	r2, r3, #12
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d1eb      	bne.n	8000c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 030f 	and.w	r3, r3, #15
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d20c      	bcs.n	8000c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c3c:	683a      	ldr	r2, [r7, #0]
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d001      	beq.n	8000c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e030      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d008      	beq.n	8000c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	4915      	ldr	r1, [pc, #84]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d009      	beq.n	8000c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	490d      	ldr	r1, [pc, #52]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c92:	f000 f81d 	bl	8000cd0 <HAL_RCC_GetSysClockFreq>
 8000c96:	4601      	mov	r1, r0
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	091b      	lsrs	r3, r3, #4
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ca4:	5cd3      	ldrb	r3, [r2, r3]
 8000ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff fc4a 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023c00 	.word	0x40023c00
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	08002ed0 	.word	0x08002ed0
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ce6:	4b50      	ldr	r3, [pc, #320]	; (8000e28 <HAL_RCC_GetSysClockFreq+0x158>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	d007      	beq.n	8000d02 <HAL_RCC_GetSysClockFreq+0x32>
 8000cf2:	2b08      	cmp	r3, #8
 8000cf4:	d008      	beq.n	8000d08 <HAL_RCC_GetSysClockFreq+0x38>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 808d 	bne.w	8000e16 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000cfc:	4b4b      	ldr	r3, [pc, #300]	; (8000e2c <HAL_RCC_GetSysClockFreq+0x15c>)
 8000cfe:	60bb      	str	r3, [r7, #8]
       break;
 8000d00:	e08c      	b.n	8000e1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000d02:	4b4b      	ldr	r3, [pc, #300]	; (8000e30 <HAL_RCC_GetSysClockFreq+0x160>)
 8000d04:	60bb      	str	r3, [r7, #8]
      break;
 8000d06:	e089      	b.n	8000e1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d08:	4b47      	ldr	r3, [pc, #284]	; (8000e28 <HAL_RCC_GetSysClockFreq+0x158>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d12:	4b45      	ldr	r3, [pc, #276]	; (8000e28 <HAL_RCC_GetSysClockFreq+0x158>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d023      	beq.n	8000d66 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d1e:	4b42      	ldr	r3, [pc, #264]	; (8000e28 <HAL_RCC_GetSysClockFreq+0x158>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	099b      	lsrs	r3, r3, #6
 8000d24:	f04f 0400 	mov.w	r4, #0
 8000d28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000d2c:	f04f 0200 	mov.w	r2, #0
 8000d30:	ea03 0501 	and.w	r5, r3, r1
 8000d34:	ea04 0602 	and.w	r6, r4, r2
 8000d38:	4a3d      	ldr	r2, [pc, #244]	; (8000e30 <HAL_RCC_GetSysClockFreq+0x160>)
 8000d3a:	fb02 f106 	mul.w	r1, r2, r6
 8000d3e:	2200      	movs	r2, #0
 8000d40:	fb02 f205 	mul.w	r2, r2, r5
 8000d44:	440a      	add	r2, r1
 8000d46:	493a      	ldr	r1, [pc, #232]	; (8000e30 <HAL_RCC_GetSysClockFreq+0x160>)
 8000d48:	fba5 0101 	umull	r0, r1, r5, r1
 8000d4c:	1853      	adds	r3, r2, r1
 8000d4e:	4619      	mov	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f04f 0400 	mov.w	r4, #0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4623      	mov	r3, r4
 8000d5a:	f7ff fa53 	bl	8000204 <__aeabi_uldivmod>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460c      	mov	r4, r1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	e049      	b.n	8000dfa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d66:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <HAL_RCC_GetSysClockFreq+0x158>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	099b      	lsrs	r3, r3, #6
 8000d6c:	f04f 0400 	mov.w	r4, #0
 8000d70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	ea03 0501 	and.w	r5, r3, r1
 8000d7c:	ea04 0602 	and.w	r6, r4, r2
 8000d80:	4629      	mov	r1, r5
 8000d82:	4632      	mov	r2, r6
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	f04f 0400 	mov.w	r4, #0
 8000d8c:	0154      	lsls	r4, r2, #5
 8000d8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000d92:	014b      	lsls	r3, r1, #5
 8000d94:	4619      	mov	r1, r3
 8000d96:	4622      	mov	r2, r4
 8000d98:	1b49      	subs	r1, r1, r5
 8000d9a:	eb62 0206 	sbc.w	r2, r2, r6
 8000d9e:	f04f 0300 	mov.w	r3, #0
 8000da2:	f04f 0400 	mov.w	r4, #0
 8000da6:	0194      	lsls	r4, r2, #6
 8000da8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000dac:	018b      	lsls	r3, r1, #6
 8000dae:	1a5b      	subs	r3, r3, r1
 8000db0:	eb64 0402 	sbc.w	r4, r4, r2
 8000db4:	f04f 0100 	mov.w	r1, #0
 8000db8:	f04f 0200 	mov.w	r2, #0
 8000dbc:	00e2      	lsls	r2, r4, #3
 8000dbe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000dc2:	00d9      	lsls	r1, r3, #3
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4614      	mov	r4, r2
 8000dc8:	195b      	adds	r3, r3, r5
 8000dca:	eb44 0406 	adc.w	r4, r4, r6
 8000dce:	f04f 0100 	mov.w	r1, #0
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	02a2      	lsls	r2, r4, #10
 8000dd8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000ddc:	0299      	lsls	r1, r3, #10
 8000dde:	460b      	mov	r3, r1
 8000de0:	4614      	mov	r4, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	4621      	mov	r1, r4
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f04f 0400 	mov.w	r4, #0
 8000dec:	461a      	mov	r2, r3
 8000dee:	4623      	mov	r3, r4
 8000df0:	f7ff fa08 	bl	8000204 <__aeabi_uldivmod>
 8000df4:	4603      	mov	r3, r0
 8000df6:	460c      	mov	r4, r1
 8000df8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_RCC_GetSysClockFreq+0x158>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	0c1b      	lsrs	r3, r3, #16
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	3301      	adds	r3, #1
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	60bb      	str	r3, [r7, #8]
      break;
 8000e14:	e002      	b.n	8000e1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_RCC_GetSysClockFreq+0x15c>)
 8000e18:	60bb      	str	r3, [r7, #8]
      break;
 8000e1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e1c:	68bb      	ldr	r3, [r7, #8]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	00f42400 	.word	0x00f42400
 8000e30:	017d7840 	.word	0x017d7840

08000e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008

08000e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e50:	f7ff fff0 	bl	8000e34 <HAL_RCC_GetHCLKFreq>
 8000e54:	4601      	mov	r1, r0
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	0a9b      	lsrs	r3, r3, #10
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	4a03      	ldr	r2, [pc, #12]	; (8000e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e62:	5cd3      	ldrb	r3, [r2, r3]
 8000e64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	08002ee0 	.word	0x08002ee0

08000e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e78:	f7ff ffdc 	bl	8000e34 <HAL_RCC_GetHCLKFreq>
 8000e7c:	4601      	mov	r1, r0
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	0b5b      	lsrs	r3, r3, #13
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	4a03      	ldr	r2, [pc, #12]	; (8000e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e8a:	5cd3      	ldrb	r3, [r2, r3]
 8000e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	08002ee0 	.word	0x08002ee0

08000e9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d075      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000eb4:	4ba2      	ldr	r3, [pc, #648]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d00c      	beq.n	8000eda <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ec0:	4b9f      	ldr	r3, [pc, #636]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	d112      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ecc:	4b9c      	ldr	r3, [pc, #624]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ed8:	d10b      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eda:	4b99      	ldr	r3, [pc, #612]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d05b      	beq.n	8000f9e <HAL_RCC_OscConfig+0x102>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d157      	bne.n	8000f9e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e20b      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efa:	d106      	bne.n	8000f0a <HAL_RCC_OscConfig+0x6e>
 8000efc:	4b90      	ldr	r3, [pc, #576]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a8f      	ldr	r2, [pc, #572]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e01d      	b.n	8000f46 <HAL_RCC_OscConfig+0xaa>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f12:	d10c      	bne.n	8000f2e <HAL_RCC_OscConfig+0x92>
 8000f14:	4b8a      	ldr	r3, [pc, #552]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a89      	ldr	r2, [pc, #548]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b87      	ldr	r3, [pc, #540]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a86      	ldr	r2, [pc, #536]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	e00b      	b.n	8000f46 <HAL_RCC_OscConfig+0xaa>
 8000f2e:	4b84      	ldr	r3, [pc, #528]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a83      	ldr	r2, [pc, #524]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b81      	ldr	r3, [pc, #516]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a80      	ldr	r2, [pc, #512]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d013      	beq.n	8000f76 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f4e:	f7ff fb3f 	bl	80005d0 <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f54:	e008      	b.n	8000f68 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f56:	f7ff fb3b 	bl	80005d0 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b64      	cmp	r3, #100	; 0x64
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e1d0      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f68:	4b75      	ldr	r3, [pc, #468]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0f0      	beq.n	8000f56 <HAL_RCC_OscConfig+0xba>
 8000f74:	e014      	b.n	8000fa0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f76:	f7ff fb2b 	bl	80005d0 <HAL_GetTick>
 8000f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7e:	f7ff fb27 	bl	80005d0 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b64      	cmp	r3, #100	; 0x64
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e1bc      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f90:	4b6b      	ldr	r3, [pc, #428]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f0      	bne.n	8000f7e <HAL_RCC_OscConfig+0xe2>
 8000f9c:	e000      	b.n	8000fa0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d063      	beq.n	8001074 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000fac:	4b64      	ldr	r3, [pc, #400]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00b      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fb8:	4b61      	ldr	r3, [pc, #388]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d11c      	bne.n	8000ffe <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fc4:	4b5e      	ldr	r3, [pc, #376]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d116      	bne.n	8000ffe <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd0:	4b5b      	ldr	r3, [pc, #364]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d005      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x14c>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d001      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e190      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe8:	4b55      	ldr	r3, [pc, #340]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	4952      	ldr	r1, [pc, #328]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffc:	e03a      	b.n	8001074 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d020      	beq.n	8001048 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001006:	4b4f      	ldr	r3, [pc, #316]	; (8001144 <HAL_RCC_OscConfig+0x2a8>)
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100c:	f7ff fae0 	bl	80005d0 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001014:	f7ff fadc 	bl	80005d0 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e171      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001026:	4b46      	ldr	r3, [pc, #280]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f0      	beq.n	8001014 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001032:	4b43      	ldr	r3, [pc, #268]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	493f      	ldr	r1, [pc, #252]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8001042:	4313      	orrs	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
 8001046:	e015      	b.n	8001074 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001048:	4b3e      	ldr	r3, [pc, #248]	; (8001144 <HAL_RCC_OscConfig+0x2a8>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104e:	f7ff fabf 	bl	80005d0 <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001056:	f7ff fabb 	bl	80005d0 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e150      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001068:	4b35      	ldr	r3, [pc, #212]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f0      	bne.n	8001056 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d030      	beq.n	80010e2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d016      	beq.n	80010b6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <HAL_RCC_OscConfig+0x2ac>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800108e:	f7ff fa9f 	bl	80005d0 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001096:	f7ff fa9b 	bl	80005d0 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e130      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 80010aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x1fa>
 80010b4:	e015      	b.n	80010e2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010bc:	f7ff fa88 	bl	80005d0 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c4:	f7ff fa84 	bl	80005d0 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e119      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 80010d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 809f 	beq.w	800122e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10f      	bne.n	8001120 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800111c:	2301      	movs	r3, #1
 800111e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_RCC_OscConfig+0x2b0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001128:	2b00      	cmp	r3, #0
 800112a:	d120      	bne.n	800116e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <HAL_RCC_OscConfig+0x2b0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_RCC_OscConfig+0x2b0>)
 8001132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001136:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001138:	f7ff fa4a 	bl	80005d0 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113e:	e010      	b.n	8001162 <HAL_RCC_OscConfig+0x2c6>
 8001140:	40023800 	.word	0x40023800
 8001144:	42470000 	.word	0x42470000
 8001148:	42470e80 	.word	0x42470e80
 800114c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001150:	f7ff fa3e 	bl	80005d0 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e0d3      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001162:	4b6c      	ldr	r3, [pc, #432]	; (8001314 <HAL_RCC_OscConfig+0x478>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d106      	bne.n	8001184 <HAL_RCC_OscConfig+0x2e8>
 8001176:	4b68      	ldr	r3, [pc, #416]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 8001178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800117a:	4a67      	ldr	r2, [pc, #412]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6713      	str	r3, [r2, #112]	; 0x70
 8001182:	e01c      	b.n	80011be <HAL_RCC_OscConfig+0x322>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b05      	cmp	r3, #5
 800118a:	d10c      	bne.n	80011a6 <HAL_RCC_OscConfig+0x30a>
 800118c:	4b62      	ldr	r3, [pc, #392]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 800118e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001190:	4a61      	ldr	r2, [pc, #388]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6713      	str	r3, [r2, #112]	; 0x70
 8001198:	4b5f      	ldr	r3, [pc, #380]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 800119a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800119c:	4a5e      	ldr	r2, [pc, #376]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6713      	str	r3, [r2, #112]	; 0x70
 80011a4:	e00b      	b.n	80011be <HAL_RCC_OscConfig+0x322>
 80011a6:	4b5c      	ldr	r3, [pc, #368]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 80011a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011aa:	4a5b      	ldr	r2, [pc, #364]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	6713      	str	r3, [r2, #112]	; 0x70
 80011b2:	4b59      	ldr	r3, [pc, #356]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 80011b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b6:	4a58      	ldr	r2, [pc, #352]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 80011b8:	f023 0304 	bic.w	r3, r3, #4
 80011bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d015      	beq.n	80011f2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c6:	f7ff fa03 	bl	80005d0 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011cc:	e00a      	b.n	80011e4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ce:	f7ff f9ff 	bl	80005d0 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011dc:	4293      	cmp	r3, r2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e092      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e4:	4b4c      	ldr	r3, [pc, #304]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 80011e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0ee      	beq.n	80011ce <HAL_RCC_OscConfig+0x332>
 80011f0:	e014      	b.n	800121c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f2:	f7ff f9ed 	bl	80005d0 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff f9e9 	bl	80005d0 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f241 3288 	movw	r2, #5000	; 0x1388
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e07c      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001210:	4b41      	ldr	r3, [pc, #260]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1ee      	bne.n	80011fa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d105      	bne.n	800122e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a3c      	ldr	r2, [pc, #240]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 8001228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d068      	beq.n	8001308 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001236:	4b38      	ldr	r3, [pc, #224]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b08      	cmp	r3, #8
 8001240:	d060      	beq.n	8001304 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d145      	bne.n	80012d6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124a:	4b34      	ldr	r3, [pc, #208]	; (800131c <HAL_RCC_OscConfig+0x480>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff f9be 	bl	80005d0 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001258:	f7ff f9ba 	bl	80005d0 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e04f      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800126a:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69da      	ldr	r2, [r3, #28]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	019b      	lsls	r3, r3, #6
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	085b      	lsrs	r3, r3, #1
 800128e:	3b01      	subs	r3, #1
 8001290:	041b      	lsls	r3, r3, #16
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	061b      	lsls	r3, r3, #24
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	071b      	lsls	r3, r3, #28
 80012a2:	491d      	ldr	r1, [pc, #116]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012a8:	4b1c      	ldr	r3, [pc, #112]	; (800131c <HAL_RCC_OscConfig+0x480>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ae:	f7ff f98f 	bl	80005d0 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b6:	f7ff f98b 	bl	80005d0 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e020      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x41a>
 80012d4:	e018      	b.n	8001308 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_RCC_OscConfig+0x480>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff f978 	bl	80005d0 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e4:	f7ff f974 	bl	80005d0 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e009      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_RCC_OscConfig+0x47c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x448>
 8001302:	e001      	b.n	8001308 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40007000 	.word	0x40007000
 8001318:	40023800 	.word	0x40023800
 800131c:	42470060 	.word	0x42470060

08001320 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e056      	b.n	80013e0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d106      	bne.n	8001352 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f001 fb97 	bl	8002a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2202      	movs	r2, #2
 8001356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001368:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	ea42 0103 	orr.w	r1, r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	0c1b      	lsrs	r3, r3, #16
 80013b0:	f003 0104 	and.w	r1, r3, #4
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	69da      	ldr	r2, [r3, #28]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e01d      	b.n	8001436 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f001 fb7e 	bl	8002b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2202      	movs	r2, #2
 8001418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3304      	adds	r3, #4
 8001424:	4619      	mov	r1, r3
 8001426:	4610      	mov	r0, r2
 8001428:	f000 f9bc 	bl	80017a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e01d      	b.n	800148c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d106      	bne.n	800146a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f815 	bl	8001494 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2202      	movs	r2, #2
 800146e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3304      	adds	r3, #4
 800147a:	4619      	mov	r1, r3
 800147c:	4610      	mov	r0, r2
 800147e:	f000 f991 	bl	80017a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80014be:	2302      	movs	r3, #2
 80014c0:	e0b4      	b.n	800162c <HAL_TIM_PWM_ConfigChannel+0x184>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2202      	movs	r2, #2
 80014ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0c      	cmp	r3, #12
 80014d6:	f200 809f 	bhi.w	8001618 <HAL_TIM_PWM_ConfigChannel+0x170>
 80014da:	a201      	add	r2, pc, #4	; (adr r2, 80014e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80014dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e0:	08001515 	.word	0x08001515
 80014e4:	08001619 	.word	0x08001619
 80014e8:	08001619 	.word	0x08001619
 80014ec:	08001619 	.word	0x08001619
 80014f0:	08001555 	.word	0x08001555
 80014f4:	08001619 	.word	0x08001619
 80014f8:	08001619 	.word	0x08001619
 80014fc:	08001619 	.word	0x08001619
 8001500:	08001597 	.word	0x08001597
 8001504:	08001619 	.word	0x08001619
 8001508:	08001619 	.word	0x08001619
 800150c:	08001619 	.word	0x08001619
 8001510:	080015d7 	.word	0x080015d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f9e2 	bl	80018e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699a      	ldr	r2, [r3, #24]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0208 	orr.w	r2, r2, #8
 800152e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699a      	ldr	r2, [r3, #24]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0204 	bic.w	r2, r2, #4
 800153e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6999      	ldr	r1, [r3, #24]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	619a      	str	r2, [r3, #24]
      break;
 8001552:	e062      	b.n	800161a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	4618      	mov	r0, r3
 800155c:	f000 fa32 	bl	80019c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699a      	ldr	r2, [r3, #24]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800156e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699a      	ldr	r2, [r3, #24]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800157e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6999      	ldr	r1, [r3, #24]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	021a      	lsls	r2, r3, #8
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	619a      	str	r2, [r3, #24]
      break;
 8001594:	e041      	b.n	800161a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fa87 	bl	8001ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	69da      	ldr	r2, [r3, #28]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0208 	orr.w	r2, r2, #8
 80015b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	69da      	ldr	r2, [r3, #28]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0204 	bic.w	r2, r2, #4
 80015c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	69d9      	ldr	r1, [r3, #28]
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	61da      	str	r2, [r3, #28]
      break;
 80015d4:	e021      	b.n	800161a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fadb 	bl	8001b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	69da      	ldr	r2, [r3, #28]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	69da      	ldr	r2, [r3, #28]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	69d9      	ldr	r1, [r3, #28]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	021a      	lsls	r2, r3, #8
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	61da      	str	r2, [r3, #28]
      break;
 8001616:	e000      	b.n	800161a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001618:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <HAL_TIM_ConfigClockSource+0x18>
 8001648:	2302      	movs	r3, #2
 800164a:	e0a6      	b.n	800179a <HAL_TIM_ConfigClockSource+0x166>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2202      	movs	r2, #2
 8001658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800166a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001672:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b40      	cmp	r3, #64	; 0x40
 8001682:	d067      	beq.n	8001754 <HAL_TIM_ConfigClockSource+0x120>
 8001684:	2b40      	cmp	r3, #64	; 0x40
 8001686:	d80b      	bhi.n	80016a0 <HAL_TIM_ConfigClockSource+0x6c>
 8001688:	2b10      	cmp	r3, #16
 800168a:	d073      	beq.n	8001774 <HAL_TIM_ConfigClockSource+0x140>
 800168c:	2b10      	cmp	r3, #16
 800168e:	d802      	bhi.n	8001696 <HAL_TIM_ConfigClockSource+0x62>
 8001690:	2b00      	cmp	r3, #0
 8001692:	d06f      	beq.n	8001774 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001694:	e078      	b.n	8001788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001696:	2b20      	cmp	r3, #32
 8001698:	d06c      	beq.n	8001774 <HAL_TIM_ConfigClockSource+0x140>
 800169a:	2b30      	cmp	r3, #48	; 0x30
 800169c:	d06a      	beq.n	8001774 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800169e:	e073      	b.n	8001788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80016a0:	2b70      	cmp	r3, #112	; 0x70
 80016a2:	d00d      	beq.n	80016c0 <HAL_TIM_ConfigClockSource+0x8c>
 80016a4:	2b70      	cmp	r3, #112	; 0x70
 80016a6:	d804      	bhi.n	80016b2 <HAL_TIM_ConfigClockSource+0x7e>
 80016a8:	2b50      	cmp	r3, #80	; 0x50
 80016aa:	d033      	beq.n	8001714 <HAL_TIM_ConfigClockSource+0xe0>
 80016ac:	2b60      	cmp	r3, #96	; 0x60
 80016ae:	d041      	beq.n	8001734 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80016b0:	e06a      	b.n	8001788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80016b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016b6:	d066      	beq.n	8001786 <HAL_TIM_ConfigClockSource+0x152>
 80016b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016bc:	d017      	beq.n	80016ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80016be:	e063      	b.n	8001788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	6899      	ldr	r1, [r3, #8]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f000 fb32 	bl	8001d38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80016e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	609a      	str	r2, [r3, #8]
      break;
 80016ec:	e04c      	b.n	8001788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	6899      	ldr	r1, [r3, #8]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f000 fb1b 	bl	8001d38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001710:	609a      	str	r2, [r3, #8]
      break;
 8001712:	e039      	b.n	8001788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	461a      	mov	r2, r3
 8001722:	f000 fa8f 	bl	8001c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2150      	movs	r1, #80	; 0x50
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fae8 	bl	8001d02 <TIM_ITRx_SetConfig>
      break;
 8001732:	e029      	b.n	8001788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	461a      	mov	r2, r3
 8001742:	f000 faae 	bl	8001ca2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2160      	movs	r1, #96	; 0x60
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fad8 	bl	8001d02 <TIM_ITRx_SetConfig>
      break;
 8001752:	e019      	b.n	8001788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	461a      	mov	r2, r3
 8001762:	f000 fa6f 	bl	8001c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2140      	movs	r1, #64	; 0x40
 800176c:	4618      	mov	r0, r3
 800176e:	f000 fac8 	bl	8001d02 <TIM_ITRx_SetConfig>
      break;
 8001772:	e009      	b.n	8001788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	4610      	mov	r0, r2
 8001780:	f000 fabf 	bl	8001d02 <TIM_ITRx_SetConfig>
      break;
 8001784:	e000      	b.n	8001788 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001786:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a40      	ldr	r2, [pc, #256]	; (80018b8 <TIM_Base_SetConfig+0x114>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d013      	beq.n	80017e4 <TIM_Base_SetConfig+0x40>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c2:	d00f      	beq.n	80017e4 <TIM_Base_SetConfig+0x40>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a3d      	ldr	r2, [pc, #244]	; (80018bc <TIM_Base_SetConfig+0x118>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d00b      	beq.n	80017e4 <TIM_Base_SetConfig+0x40>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a3c      	ldr	r2, [pc, #240]	; (80018c0 <TIM_Base_SetConfig+0x11c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d007      	beq.n	80017e4 <TIM_Base_SetConfig+0x40>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a3b      	ldr	r2, [pc, #236]	; (80018c4 <TIM_Base_SetConfig+0x120>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d003      	beq.n	80017e4 <TIM_Base_SetConfig+0x40>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a3a      	ldr	r2, [pc, #232]	; (80018c8 <TIM_Base_SetConfig+0x124>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d108      	bne.n	80017f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a2f      	ldr	r2, [pc, #188]	; (80018b8 <TIM_Base_SetConfig+0x114>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d02b      	beq.n	8001856 <TIM_Base_SetConfig+0xb2>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001804:	d027      	beq.n	8001856 <TIM_Base_SetConfig+0xb2>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a2c      	ldr	r2, [pc, #176]	; (80018bc <TIM_Base_SetConfig+0x118>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d023      	beq.n	8001856 <TIM_Base_SetConfig+0xb2>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a2b      	ldr	r2, [pc, #172]	; (80018c0 <TIM_Base_SetConfig+0x11c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01f      	beq.n	8001856 <TIM_Base_SetConfig+0xb2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a2a      	ldr	r2, [pc, #168]	; (80018c4 <TIM_Base_SetConfig+0x120>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d01b      	beq.n	8001856 <TIM_Base_SetConfig+0xb2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a29      	ldr	r2, [pc, #164]	; (80018c8 <TIM_Base_SetConfig+0x124>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d017      	beq.n	8001856 <TIM_Base_SetConfig+0xb2>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a28      	ldr	r2, [pc, #160]	; (80018cc <TIM_Base_SetConfig+0x128>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <TIM_Base_SetConfig+0xb2>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <TIM_Base_SetConfig+0x12c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00f      	beq.n	8001856 <TIM_Base_SetConfig+0xb2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <TIM_Base_SetConfig+0x130>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00b      	beq.n	8001856 <TIM_Base_SetConfig+0xb2>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a25      	ldr	r2, [pc, #148]	; (80018d8 <TIM_Base_SetConfig+0x134>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d007      	beq.n	8001856 <TIM_Base_SetConfig+0xb2>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a24      	ldr	r2, [pc, #144]	; (80018dc <TIM_Base_SetConfig+0x138>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d003      	beq.n	8001856 <TIM_Base_SetConfig+0xb2>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a23      	ldr	r2, [pc, #140]	; (80018e0 <TIM_Base_SetConfig+0x13c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d108      	bne.n	8001868 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800185c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <TIM_Base_SetConfig+0x114>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d003      	beq.n	800189c <TIM_Base_SetConfig+0xf8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a0c      	ldr	r2, [pc, #48]	; (80018c8 <TIM_Base_SetConfig+0x124>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d103      	bne.n	80018a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	615a      	str	r2, [r3, #20]
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40010000 	.word	0x40010000
 80018bc:	40000400 	.word	0x40000400
 80018c0:	40000800 	.word	0x40000800
 80018c4:	40000c00 	.word	0x40000c00
 80018c8:	40010400 	.word	0x40010400
 80018cc:	40014000 	.word	0x40014000
 80018d0:	40014400 	.word	0x40014400
 80018d4:	40014800 	.word	0x40014800
 80018d8:	40001800 	.word	0x40001800
 80018dc:	40001c00 	.word	0x40001c00
 80018e0:	40002000 	.word	0x40002000

080018e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	f023 0201 	bic.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f023 0302 	bic.w	r3, r3, #2
 800192c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4313      	orrs	r3, r2
 8001936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a20      	ldr	r2, [pc, #128]	; (80019bc <TIM_OC1_SetConfig+0xd8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d003      	beq.n	8001948 <TIM_OC1_SetConfig+0x64>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <TIM_OC1_SetConfig+0xdc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d10c      	bne.n	8001962 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f023 0308 	bic.w	r3, r3, #8
 800194e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	4313      	orrs	r3, r2
 8001958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a15      	ldr	r2, [pc, #84]	; (80019bc <TIM_OC1_SetConfig+0xd8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d003      	beq.n	8001972 <TIM_OC1_SetConfig+0x8e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <TIM_OC1_SetConfig+0xdc>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d111      	bne.n	8001996 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	621a      	str	r2, [r3, #32]
}
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	40010000 	.word	0x40010000
 80019c0:	40010400 	.word	0x40010400

080019c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	f023 0210 	bic.w	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	021b      	lsls	r3, r3, #8
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f023 0320 	bic.w	r3, r3, #32
 8001a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <TIM_OC2_SetConfig+0xe4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d003      	beq.n	8001a2c <TIM_OC2_SetConfig+0x68>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a21      	ldr	r2, [pc, #132]	; (8001aac <TIM_OC2_SetConfig+0xe8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d10d      	bne.n	8001a48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <TIM_OC2_SetConfig+0xe4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d003      	beq.n	8001a58 <TIM_OC2_SetConfig+0x94>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a16      	ldr	r2, [pc, #88]	; (8001aac <TIM_OC2_SetConfig+0xe8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d113      	bne.n	8001a80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	621a      	str	r2, [r3, #32]
}
 8001a9a:	bf00      	nop
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	40010400 	.word	0x40010400

08001ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f023 0303 	bic.w	r3, r3, #3
 8001ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a21      	ldr	r2, [pc, #132]	; (8001b90 <TIM_OC3_SetConfig+0xe0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d003      	beq.n	8001b16 <TIM_OC3_SetConfig+0x66>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a20      	ldr	r2, [pc, #128]	; (8001b94 <TIM_OC3_SetConfig+0xe4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d10d      	bne.n	8001b32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <TIM_OC3_SetConfig+0xe0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d003      	beq.n	8001b42 <TIM_OC3_SetConfig+0x92>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <TIM_OC3_SetConfig+0xe4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d113      	bne.n	8001b6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	621a      	str	r2, [r3, #32]
}
 8001b84:	bf00      	nop
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40010000 	.word	0x40010000
 8001b94:	40010400 	.word	0x40010400

08001b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	031b      	lsls	r3, r3, #12
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <TIM_OC4_SetConfig+0xa4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d003      	beq.n	8001c00 <TIM_OC4_SetConfig+0x68>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a11      	ldr	r2, [pc, #68]	; (8001c40 <TIM_OC4_SetConfig+0xa8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d109      	bne.n	8001c14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	019b      	lsls	r3, r3, #6
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	621a      	str	r2, [r3, #32]
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40010400 	.word	0x40010400

08001c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	f023 0201 	bic.w	r2, r3, #1
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f023 030a 	bic.w	r3, r3, #10
 8001c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	621a      	str	r2, [r3, #32]
}
 8001c96:	bf00      	nop
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b087      	sub	sp, #28
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	f023 0210 	bic.w	r2, r3, #16
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	031b      	lsls	r3, r3, #12
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001cde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	621a      	str	r2, [r3, #32]
}
 8001cf6:	bf00      	nop
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f043 0307 	orr.w	r3, r3, #7
 8001d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	609a      	str	r2, [r3, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	021a      	lsls	r2, r3, #8
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	609a      	str	r2, [r3, #8]
}
 8001d6c:	bf00      	nop
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e032      	b.n	8001df6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dc8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e03d      	b.n	8001e9a <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e03f      	b.n	8001f38 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d106      	bne.n	8001ed2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 febb 	bl	8002c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2224      	movs	r2, #36	; 0x24
 8001ed6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f828 	bl	8001f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001efe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f80:	f023 030c 	bic.w	r3, r3, #12
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	68f9      	ldr	r1, [r7, #12]
 8001f8a:	430b      	orrs	r3, r1
 8001f8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fac:	f040 80e4 	bne.w	8002178 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4aab      	ldr	r2, [pc, #684]	; (8002264 <UART_SetConfig+0x324>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d004      	beq.n	8001fc4 <UART_SetConfig+0x84>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4aaa      	ldr	r2, [pc, #680]	; (8002268 <UART_SetConfig+0x328>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d16c      	bne.n	800209e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001fc4:	f7fe ff56 	bl	8000e74 <HAL_RCC_GetPCLK2Freq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	009a      	lsls	r2, r3, #2
 8001fd2:	441a      	add	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4aa3      	ldr	r2, [pc, #652]	; (800226c <UART_SetConfig+0x32c>)
 8001fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	011c      	lsls	r4, r3, #4
 8001fe8:	f7fe ff44 	bl	8000e74 <HAL_RCC_GetPCLK2Freq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009a      	lsls	r2, r3, #2
 8001ff6:	441a      	add	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fbb2 f5f3 	udiv	r5, r2, r3
 8002002:	f7fe ff37 	bl	8000e74 <HAL_RCC_GetPCLK2Freq>
 8002006:	4602      	mov	r2, r0
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	009a      	lsls	r2, r3, #2
 8002010:	441a      	add	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fbb2 f3f3 	udiv	r3, r2, r3
 800201c:	4a93      	ldr	r2, [pc, #588]	; (800226c <UART_SetConfig+0x32c>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2264      	movs	r2, #100	; 0x64
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	1aeb      	subs	r3, r5, r3
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	3332      	adds	r3, #50	; 0x32
 8002030:	4a8e      	ldr	r2, [pc, #568]	; (800226c <UART_SetConfig+0x32c>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800203e:	441c      	add	r4, r3
 8002040:	f7fe ff18 	bl	8000e74 <HAL_RCC_GetPCLK2Freq>
 8002044:	4602      	mov	r2, r0
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	009a      	lsls	r2, r3, #2
 800204e:	441a      	add	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fbb2 f5f3 	udiv	r5, r2, r3
 800205a:	f7fe ff0b 	bl	8000e74 <HAL_RCC_GetPCLK2Freq>
 800205e:	4602      	mov	r2, r0
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	009a      	lsls	r2, r3, #2
 8002068:	441a      	add	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	4a7d      	ldr	r2, [pc, #500]	; (800226c <UART_SetConfig+0x32c>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2264      	movs	r2, #100	; 0x64
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	1aeb      	subs	r3, r5, r3
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	3332      	adds	r3, #50	; 0x32
 8002088:	4a78      	ldr	r2, [pc, #480]	; (800226c <UART_SetConfig+0x32c>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	f003 0207 	and.w	r2, r3, #7
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4422      	add	r2, r4
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	e154      	b.n	8002348 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800209e:	f7fe fed5 	bl	8000e4c <HAL_RCC_GetPCLK1Freq>
 80020a2:	4602      	mov	r2, r0
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	009a      	lsls	r2, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	4a6c      	ldr	r2, [pc, #432]	; (800226c <UART_SetConfig+0x32c>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	011c      	lsls	r4, r3, #4
 80020c2:	f7fe fec3 	bl	8000e4c <HAL_RCC_GetPCLK1Freq>
 80020c6:	4602      	mov	r2, r0
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	009a      	lsls	r2, r3, #2
 80020d0:	441a      	add	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fbb2 f5f3 	udiv	r5, r2, r3
 80020dc:	f7fe feb6 	bl	8000e4c <HAL_RCC_GetPCLK1Freq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	009a      	lsls	r2, r3, #2
 80020ea:	441a      	add	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f6:	4a5d      	ldr	r2, [pc, #372]	; (800226c <UART_SetConfig+0x32c>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	095b      	lsrs	r3, r3, #5
 80020fe:	2264      	movs	r2, #100	; 0x64
 8002100:	fb02 f303 	mul.w	r3, r2, r3
 8002104:	1aeb      	subs	r3, r5, r3
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	3332      	adds	r3, #50	; 0x32
 800210a:	4a58      	ldr	r2, [pc, #352]	; (800226c <UART_SetConfig+0x32c>)
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002118:	441c      	add	r4, r3
 800211a:	f7fe fe97 	bl	8000e4c <HAL_RCC_GetPCLK1Freq>
 800211e:	4602      	mov	r2, r0
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	009a      	lsls	r2, r3, #2
 8002128:	441a      	add	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fbb2 f5f3 	udiv	r5, r2, r3
 8002134:	f7fe fe8a 	bl	8000e4c <HAL_RCC_GetPCLK1Freq>
 8002138:	4602      	mov	r2, r0
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	009a      	lsls	r2, r3, #2
 8002142:	441a      	add	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	fbb2 f3f3 	udiv	r3, r2, r3
 800214e:	4a47      	ldr	r2, [pc, #284]	; (800226c <UART_SetConfig+0x32c>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	095b      	lsrs	r3, r3, #5
 8002156:	2264      	movs	r2, #100	; 0x64
 8002158:	fb02 f303 	mul.w	r3, r2, r3
 800215c:	1aeb      	subs	r3, r5, r3
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	3332      	adds	r3, #50	; 0x32
 8002162:	4a42      	ldr	r2, [pc, #264]	; (800226c <UART_SetConfig+0x32c>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	f003 0207 	and.w	r2, r3, #7
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4422      	add	r2, r4
 8002174:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002176:	e0e7      	b.n	8002348 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a39      	ldr	r2, [pc, #228]	; (8002264 <UART_SetConfig+0x324>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d004      	beq.n	800218c <UART_SetConfig+0x24c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a38      	ldr	r2, [pc, #224]	; (8002268 <UART_SetConfig+0x328>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d171      	bne.n	8002270 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800218c:	f7fe fe72 	bl	8000e74 <HAL_RCC_GetPCLK2Freq>
 8002190:	4602      	mov	r2, r0
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	009a      	lsls	r2, r3, #2
 800219a:	441a      	add	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	4a31      	ldr	r2, [pc, #196]	; (800226c <UART_SetConfig+0x32c>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	011c      	lsls	r4, r3, #4
 80021b0:	f7fe fe60 	bl	8000e74 <HAL_RCC_GetPCLK2Freq>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	009a      	lsls	r2, r3, #2
 80021be:	441a      	add	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	fbb2 f5f3 	udiv	r5, r2, r3
 80021ca:	f7fe fe53 	bl	8000e74 <HAL_RCC_GetPCLK2Freq>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	009a      	lsls	r2, r3, #2
 80021d8:	441a      	add	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	4a21      	ldr	r2, [pc, #132]	; (800226c <UART_SetConfig+0x32c>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2264      	movs	r2, #100	; 0x64
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	1aeb      	subs	r3, r5, r3
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	3332      	adds	r3, #50	; 0x32
 80021f8:	4a1c      	ldr	r2, [pc, #112]	; (800226c <UART_SetConfig+0x32c>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002204:	441c      	add	r4, r3
 8002206:	f7fe fe35 	bl	8000e74 <HAL_RCC_GetPCLK2Freq>
 800220a:	4602      	mov	r2, r0
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	009a      	lsls	r2, r3, #2
 8002214:	441a      	add	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002220:	f7fe fe28 	bl	8000e74 <HAL_RCC_GetPCLK2Freq>
 8002224:	4602      	mov	r2, r0
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	009a      	lsls	r2, r3, #2
 800222e:	441a      	add	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	fbb2 f3f3 	udiv	r3, r2, r3
 800223a:	4a0c      	ldr	r2, [pc, #48]	; (800226c <UART_SetConfig+0x32c>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	2264      	movs	r2, #100	; 0x64
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	1aeb      	subs	r3, r5, r3
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	3332      	adds	r3, #50	; 0x32
 800224e:	4a07      	ldr	r2, [pc, #28]	; (800226c <UART_SetConfig+0x32c>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	f003 020f 	and.w	r2, r3, #15
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4422      	add	r2, r4
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	e071      	b.n	8002348 <UART_SetConfig+0x408>
 8002264:	40011000 	.word	0x40011000
 8002268:	40011400 	.word	0x40011400
 800226c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002270:	f7fe fdec 	bl	8000e4c <HAL_RCC_GetPCLK1Freq>
 8002274:	4602      	mov	r2, r0
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	009a      	lsls	r2, r3, #2
 800227e:	441a      	add	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	4a31      	ldr	r2, [pc, #196]	; (8002350 <UART_SetConfig+0x410>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	011c      	lsls	r4, r3, #4
 8002294:	f7fe fdda 	bl	8000e4c <HAL_RCC_GetPCLK1Freq>
 8002298:	4602      	mov	r2, r0
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	009a      	lsls	r2, r3, #2
 80022a2:	441a      	add	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	fbb2 f5f3 	udiv	r5, r2, r3
 80022ae:	f7fe fdcd 	bl	8000e4c <HAL_RCC_GetPCLK1Freq>
 80022b2:	4602      	mov	r2, r0
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	009a      	lsls	r2, r3, #2
 80022bc:	441a      	add	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c8:	4a21      	ldr	r2, [pc, #132]	; (8002350 <UART_SetConfig+0x410>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2264      	movs	r2, #100	; 0x64
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	1aeb      	subs	r3, r5, r3
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	3332      	adds	r3, #50	; 0x32
 80022dc:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <UART_SetConfig+0x410>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e8:	441c      	add	r4, r3
 80022ea:	f7fe fdaf 	bl	8000e4c <HAL_RCC_GetPCLK1Freq>
 80022ee:	4602      	mov	r2, r0
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	009a      	lsls	r2, r3, #2
 80022f8:	441a      	add	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fbb2 f5f3 	udiv	r5, r2, r3
 8002304:	f7fe fda2 	bl	8000e4c <HAL_RCC_GetPCLK1Freq>
 8002308:	4602      	mov	r2, r0
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	009a      	lsls	r2, r3, #2
 8002312:	441a      	add	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <UART_SetConfig+0x410>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	2264      	movs	r2, #100	; 0x64
 8002328:	fb02 f303 	mul.w	r3, r2, r3
 800232c:	1aeb      	subs	r3, r5, r3
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	3332      	adds	r3, #50	; 0x32
 8002332:	4a07      	ldr	r2, [pc, #28]	; (8002350 <UART_SetConfig+0x410>)
 8002334:	fba2 2303 	umull	r2, r3, r2, r3
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	f003 020f 	and.w	r2, r3, #15
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4422      	add	r2, r4
 8002344:	609a      	str	r2, [r3, #8]
}
 8002346:	e7ff      	b.n	8002348 <UART_SetConfig+0x408>
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bdb0      	pop	{r4, r5, r7, pc}
 8002350:	51eb851f 	.word	0x51eb851f

08002354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002358:	f7fe f8d4 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800235c:	f000 f80e 	bl	800237c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002360:	f000 fa34 	bl	80027cc <MX_GPIO_Init>
  MX_SPI1_Init();
 8002364:	f000 f868 	bl	8002438 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002368:	f000 f89c 	bl	80024a4 <MX_TIM1_Init>
  MX_TIM8_Init();
 800236c:	f000 f93a 	bl	80025e4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002370:	f000 f9d8 	bl	8002724 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002374:	f000 fa00 	bl	8002778 <MX_USART6_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002378:	e7fe      	b.n	8002378 <main+0x24>
	...

0800237c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b094      	sub	sp, #80	; 0x50
 8002380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	2234      	movs	r2, #52	; 0x34
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fd8c 	bl	8002ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a0:	2300      	movs	r3, #0
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	4b22      	ldr	r3, [pc, #136]	; (8002430 <SystemClock_Config+0xb4>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	4a21      	ldr	r2, [pc, #132]	; (8002430 <SystemClock_Config+0xb4>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	6413      	str	r3, [r2, #64]	; 0x40
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <SystemClock_Config+0xb4>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023bc:	2300      	movs	r3, #0
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <SystemClock_Config+0xb8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <SystemClock_Config+0xb8>)
 80023c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <SystemClock_Config+0xb8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023d8:	2302      	movs	r3, #2
 80023da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023dc:	2301      	movs	r3, #1
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023e0:	2310      	movs	r3, #16
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e8:	f107 031c 	add.w	r3, r7, #28
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe fd55 	bl	8000e9c <HAL_RCC_OscConfig>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80023f8:	f000 fb12 	bl	8002a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023fc:	230f      	movs	r3, #15
 80023fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002410:	f107 0308 	add.w	r3, r7, #8
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fb78 	bl	8000b0c <HAL_RCC_ClockConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002422:	f000 fafd 	bl	8002a20 <Error_Handler>
  }
}
 8002426:	bf00      	nop
 8002428:	3750      	adds	r7, #80	; 0x50
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	40007000 	.word	0x40007000

08002438 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <MX_SPI1_Init+0x64>)
 800243e:	4a18      	ldr	r2, [pc, #96]	; (80024a0 <MX_SPI1_Init+0x68>)
 8002440:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <MX_SPI1_Init+0x64>)
 8002444:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002448:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800244a:	4b14      	ldr	r3, [pc, #80]	; (800249c <MX_SPI1_Init+0x64>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <MX_SPI1_Init+0x64>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_SPI1_Init+0x64>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <MX_SPI1_Init+0x64>)
 800245e:	2200      	movs	r2, #0
 8002460:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_SPI1_Init+0x64>)
 8002464:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002468:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_SPI1_Init+0x64>)
 800246c:	2200      	movs	r2, #0
 800246e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <MX_SPI1_Init+0x64>)
 8002472:	2200      	movs	r2, #0
 8002474:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_SPI1_Init+0x64>)
 8002478:	2200      	movs	r2, #0
 800247a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <MX_SPI1_Init+0x64>)
 800247e:	2200      	movs	r2, #0
 8002480:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_SPI1_Init+0x64>)
 8002484:	220a      	movs	r2, #10
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002488:	4804      	ldr	r0, [pc, #16]	; (800249c <MX_SPI1_Init+0x64>)
 800248a:	f7fe ff49 	bl	8001320 <HAL_SPI_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002494:	f000 fac4 	bl	8002a20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	2000012c 	.word	0x2000012c
 80024a0:	40013000 	.word	0x40013000

080024a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b096      	sub	sp, #88	; 0x58
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	611a      	str	r2, [r3, #16]
 80024d2:	615a      	str	r2, [r3, #20]
 80024d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	2220      	movs	r2, #32
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fce3 	bl	8002ea8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024e2:	4b3e      	ldr	r3, [pc, #248]	; (80025dc <MX_TIM1_Init+0x138>)
 80024e4:	4a3e      	ldr	r2, [pc, #248]	; (80025e0 <MX_TIM1_Init+0x13c>)
 80024e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80024e8:	4b3c      	ldr	r3, [pc, #240]	; (80025dc <MX_TIM1_Init+0x138>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <MX_TIM1_Init+0x138>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80024f4:	4b39      	ldr	r3, [pc, #228]	; (80025dc <MX_TIM1_Init+0x138>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <MX_TIM1_Init+0x138>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002500:	4b36      	ldr	r3, [pc, #216]	; (80025dc <MX_TIM1_Init+0x138>)
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002506:	4b35      	ldr	r3, [pc, #212]	; (80025dc <MX_TIM1_Init+0x138>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800250c:	4833      	ldr	r0, [pc, #204]	; (80025dc <MX_TIM1_Init+0x138>)
 800250e:	f7fe ff6b 	bl	80013e8 <HAL_TIM_Base_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002518:	f000 fa82 	bl	8002a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800251c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002520:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002522:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002526:	4619      	mov	r1, r3
 8002528:	482c      	ldr	r0, [pc, #176]	; (80025dc <MX_TIM1_Init+0x138>)
 800252a:	f7ff f883 	bl	8001634 <HAL_TIM_ConfigClockSource>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002534:	f000 fa74 	bl	8002a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002538:	4828      	ldr	r0, [pc, #160]	; (80025dc <MX_TIM1_Init+0x138>)
 800253a:	f7fe ff80 	bl	800143e <HAL_TIM_PWM_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002544:	f000 fa6c 	bl	8002a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002548:	2300      	movs	r3, #0
 800254a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002550:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002554:	4619      	mov	r1, r3
 8002556:	4821      	ldr	r0, [pc, #132]	; (80025dc <MX_TIM1_Init+0x138>)
 8002558:	f7ff fc0e 	bl	8001d78 <HAL_TIMEx_MasterConfigSynchronization>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002562:	f000 fa5d 	bl	8002a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002566:	2360      	movs	r3, #96	; 0x60
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800256e:	2300      	movs	r3, #0
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002572:	2300      	movs	r3, #0
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002586:	2200      	movs	r2, #0
 8002588:	4619      	mov	r1, r3
 800258a:	4814      	ldr	r0, [pc, #80]	; (80025dc <MX_TIM1_Init+0x138>)
 800258c:	f7fe ff8c 	bl	80014a8 <HAL_TIM_PWM_ConfigChannel>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002596:	f000 fa43 	bl	8002a20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	4807      	ldr	r0, [pc, #28]	; (80025dc <MX_TIM1_Init+0x138>)
 80025be:	f7ff fc20 	bl	8001e02 <HAL_TIMEx_ConfigBreakDeadTime>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80025c8:	f000 fa2a 	bl	8002a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025cc:	4803      	ldr	r0, [pc, #12]	; (80025dc <MX_TIM1_Init+0x138>)
 80025ce:	f000 fad7 	bl	8002b80 <HAL_TIM_MspPostInit>

}
 80025d2:	bf00      	nop
 80025d4:	3758      	adds	r7, #88	; 0x58
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200000ac 	.word	0x200000ac
 80025e0:	40010000 	.word	0x40010000

080025e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b096      	sub	sp, #88	; 0x58
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]
 8002610:	611a      	str	r2, [r3, #16]
 8002612:	615a      	str	r2, [r3, #20]
 8002614:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	2220      	movs	r2, #32
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fc43 	bl	8002ea8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002622:	4b3e      	ldr	r3, [pc, #248]	; (800271c <MX_TIM8_Init+0x138>)
 8002624:	4a3e      	ldr	r2, [pc, #248]	; (8002720 <MX_TIM8_Init+0x13c>)
 8002626:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002628:	4b3c      	ldr	r3, [pc, #240]	; (800271c <MX_TIM8_Init+0x138>)
 800262a:	2200      	movs	r2, #0
 800262c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262e:	4b3b      	ldr	r3, [pc, #236]	; (800271c <MX_TIM8_Init+0x138>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8002634:	4b39      	ldr	r3, [pc, #228]	; (800271c <MX_TIM8_Init+0x138>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263a:	4b38      	ldr	r3, [pc, #224]	; (800271c <MX_TIM8_Init+0x138>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002640:	4b36      	ldr	r3, [pc, #216]	; (800271c <MX_TIM8_Init+0x138>)
 8002642:	2200      	movs	r2, #0
 8002644:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002646:	4b35      	ldr	r3, [pc, #212]	; (800271c <MX_TIM8_Init+0x138>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800264c:	4833      	ldr	r0, [pc, #204]	; (800271c <MX_TIM8_Init+0x138>)
 800264e:	f7fe fecb 	bl	80013e8 <HAL_TIM_Base_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002658:	f000 f9e2 	bl	8002a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800265c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002660:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002662:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002666:	4619      	mov	r1, r3
 8002668:	482c      	ldr	r0, [pc, #176]	; (800271c <MX_TIM8_Init+0x138>)
 800266a:	f7fe ffe3 	bl	8001634 <HAL_TIM_ConfigClockSource>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002674:	f000 f9d4 	bl	8002a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002678:	4828      	ldr	r0, [pc, #160]	; (800271c <MX_TIM8_Init+0x138>)
 800267a:	f7fe fee0 	bl	800143e <HAL_TIM_PWM_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002684:	f000 f9cc 	bl	8002a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002690:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002694:	4619      	mov	r1, r3
 8002696:	4821      	ldr	r0, [pc, #132]	; (800271c <MX_TIM8_Init+0x138>)
 8002698:	f7ff fb6e 	bl	8001d78 <HAL_TIMEx_MasterConfigSynchronization>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80026a2:	f000 f9bd 	bl	8002a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026a6:	2360      	movs	r3, #96	; 0x60
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026b2:	2300      	movs	r3, #0
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c6:	2208      	movs	r2, #8
 80026c8:	4619      	mov	r1, r3
 80026ca:	4814      	ldr	r0, [pc, #80]	; (800271c <MX_TIM8_Init+0x138>)
 80026cc:	f7fe feec 	bl	80014a8 <HAL_TIM_PWM_ConfigChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80026d6:	f000 f9a3 	bl	8002a20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	4619      	mov	r1, r3
 80026fc:	4807      	ldr	r0, [pc, #28]	; (800271c <MX_TIM8_Init+0x138>)
 80026fe:	f7ff fb80 	bl	8001e02 <HAL_TIMEx_ConfigBreakDeadTime>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002708:	f000 f98a 	bl	8002a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800270c:	4803      	ldr	r0, [pc, #12]	; (800271c <MX_TIM8_Init+0x138>)
 800270e:	f000 fa37 	bl	8002b80 <HAL_TIM_MspPostInit>

}
 8002712:	bf00      	nop
 8002714:	3758      	adds	r7, #88	; 0x58
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	2000002c 	.word	0x2000002c
 8002720:	40010400 	.word	0x40010400

08002724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <MX_USART1_UART_Init+0x4c>)
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <MX_USART1_UART_Init+0x50>)
 800272c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <MX_USART1_UART_Init+0x4c>)
 8002730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <MX_USART1_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <MX_USART1_UART_Init+0x4c>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <MX_USART1_UART_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <MX_USART1_UART_Init+0x4c>)
 800274a:	220c      	movs	r2, #12
 800274c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <MX_USART1_UART_Init+0x4c>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MX_USART1_UART_Init+0x4c>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800275a:	4805      	ldr	r0, [pc, #20]	; (8002770 <MX_USART1_UART_Init+0x4c>)
 800275c:	f7ff fba3 	bl	8001ea6 <HAL_UART_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002766:	f000 f95b 	bl	8002a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000006c 	.word	0x2000006c
 8002774:	40011000 	.word	0x40011000

08002778 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_USART6_UART_Init+0x4c>)
 800277e:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <MX_USART6_UART_Init+0x50>)
 8002780:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <MX_USART6_UART_Init+0x4c>)
 8002784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002788:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <MX_USART6_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <MX_USART6_UART_Init+0x4c>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <MX_USART6_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MX_USART6_UART_Init+0x4c>)
 800279e:	220c      	movs	r2, #12
 80027a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <MX_USART6_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_USART6_UART_Init+0x4c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <MX_USART6_UART_Init+0x4c>)
 80027b0:	f7ff fb79 	bl	8001ea6 <HAL_UART_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80027ba:	f000 f931 	bl	8002a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200000ec 	.word	0x200000ec
 80027c8:	40011400 	.word	0x40011400

080027cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08e      	sub	sp, #56	; 0x38
 80027d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	60da      	str	r2, [r3, #12]
 80027e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
 80027e6:	4b85      	ldr	r3, [pc, #532]	; (80029fc <MX_GPIO_Init+0x230>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a84      	ldr	r2, [pc, #528]	; (80029fc <MX_GPIO_Init+0x230>)
 80027ec:	f043 0310 	orr.w	r3, r3, #16
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b82      	ldr	r3, [pc, #520]	; (80029fc <MX_GPIO_Init+0x230>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	623b      	str	r3, [r7, #32]
 80027fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	4b7e      	ldr	r3, [pc, #504]	; (80029fc <MX_GPIO_Init+0x230>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a7d      	ldr	r2, [pc, #500]	; (80029fc <MX_GPIO_Init+0x230>)
 8002808:	f043 0304 	orr.w	r3, r3, #4
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b7b      	ldr	r3, [pc, #492]	; (80029fc <MX_GPIO_Init+0x230>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	4b77      	ldr	r3, [pc, #476]	; (80029fc <MX_GPIO_Init+0x230>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a76      	ldr	r2, [pc, #472]	; (80029fc <MX_GPIO_Init+0x230>)
 8002824:	f043 0320 	orr.w	r3, r3, #32
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b74      	ldr	r3, [pc, #464]	; (80029fc <MX_GPIO_Init+0x230>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	4b70      	ldr	r3, [pc, #448]	; (80029fc <MX_GPIO_Init+0x230>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a6f      	ldr	r2, [pc, #444]	; (80029fc <MX_GPIO_Init+0x230>)
 8002840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b6d      	ldr	r3, [pc, #436]	; (80029fc <MX_GPIO_Init+0x230>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	4b69      	ldr	r3, [pc, #420]	; (80029fc <MX_GPIO_Init+0x230>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a68      	ldr	r2, [pc, #416]	; (80029fc <MX_GPIO_Init+0x230>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b66      	ldr	r3, [pc, #408]	; (80029fc <MX_GPIO_Init+0x230>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b62      	ldr	r3, [pc, #392]	; (80029fc <MX_GPIO_Init+0x230>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a61      	ldr	r2, [pc, #388]	; (80029fc <MX_GPIO_Init+0x230>)
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b5f      	ldr	r3, [pc, #380]	; (80029fc <MX_GPIO_Init+0x230>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	4b5b      	ldr	r3, [pc, #364]	; (80029fc <MX_GPIO_Init+0x230>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a5a      	ldr	r2, [pc, #360]	; (80029fc <MX_GPIO_Init+0x230>)
 8002894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b58      	ldr	r3, [pc, #352]	; (80029fc <MX_GPIO_Init+0x230>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	4b54      	ldr	r3, [pc, #336]	; (80029fc <MX_GPIO_Init+0x230>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a53      	ldr	r2, [pc, #332]	; (80029fc <MX_GPIO_Init+0x230>)
 80028b0:	f043 0308 	orr.w	r3, r3, #8
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b51      	ldr	r3, [pc, #324]	; (80029fc <MX_GPIO_Init+0x230>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2103      	movs	r1, #3
 80028c6:	484e      	ldr	r0, [pc, #312]	; (8002a00 <MX_GPIO_Init+0x234>)
 80028c8:	f7fe f906 	bl	8000ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80028cc:	2200      	movs	r2, #0
 80028ce:	2110      	movs	r1, #16
 80028d0:	484c      	ldr	r0, [pc, #304]	; (8002a04 <MX_GPIO_Init+0x238>)
 80028d2:	f7fe f901 	bl	8000ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80028d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028dc:	2303      	movs	r3, #3
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e8:	4619      	mov	r1, r3
 80028ea:	4847      	ldr	r0, [pc, #284]	; (8002a08 <MX_GPIO_Init+0x23c>)
 80028ec:	f7fd ff62 	bl	80007b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC9 
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80028f0:	f64f 630f 	movw	r3, #65039	; 0xfe0f
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028f6:	2303      	movs	r3, #3
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002902:	4619      	mov	r1, r3
 8002904:	483f      	ldr	r0, [pc, #252]	; (8002a04 <MX_GPIO_Init+0x238>)
 8002906:	f7fd ff55 	bl	80007b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 
                           PF4 PF5 PF6 PF7 
                           PF8 PF9 PF10 PF11 
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800290a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002910:	2303      	movs	r3, #3
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291c:	4619      	mov	r1, r3
 800291e:	483b      	ldr	r0, [pc, #236]	; (8002a0c <MX_GPIO_Init+0x240>)
 8002920:	f7fd ff48 	bl	80007b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002924:	2303      	movs	r3, #3
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002928:	2303      	movs	r3, #3
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002934:	4619      	mov	r1, r3
 8002936:	4836      	ldr	r0, [pc, #216]	; (8002a10 <MX_GPIO_Init+0x244>)
 8002938:	f7fd ff3c 	bl	80007b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800293c:	2303      	movs	r3, #3
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002940:	2301      	movs	r3, #1
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	4619      	mov	r1, r3
 8002952:	482b      	ldr	r0, [pc, #172]	; (8002a00 <MX_GPIO_Init+0x234>)
 8002954:	f7fd ff2e 	bl	80007b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12;
 8002958:	f641 030c 	movw	r3, #6156	; 0x180c
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800295e:	2303      	movs	r3, #3
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800296a:	4619      	mov	r1, r3
 800296c:	4824      	ldr	r0, [pc, #144]	; (8002a00 <MX_GPIO_Init+0x234>)
 800296e:	f7fd ff21 	bl	80007b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002972:	2310      	movs	r3, #16
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002976:	2301      	movs	r3, #1
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297e:	2300      	movs	r3, #0
 8002980:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002986:	4619      	mov	r1, r3
 8002988:	481e      	ldr	r0, [pc, #120]	; (8002a04 <MX_GPIO_Init+0x238>)
 800298a:	f7fd ff13 	bl	80007b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800298e:	2320      	movs	r3, #32
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002992:	2300      	movs	r3, #0
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299e:	4619      	mov	r1, r3
 80029a0:	4818      	ldr	r0, [pc, #96]	; (8002a04 <MX_GPIO_Init+0x238>)
 80029a2:	f7fd ff07 	bl	80007b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80029a6:	f64f 73e7 	movw	r3, #65511	; 0xffe7
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ac:	2303      	movs	r3, #3
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b8:	4619      	mov	r1, r3
 80029ba:	4816      	ldr	r0, [pc, #88]	; (8002a14 <MX_GPIO_Init+0x248>)
 80029bc:	f7fd fefa 	bl	80007b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG5 PG6 PG7 
                           PG8 PG9 PG10 PG11 
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80029c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029c6:	2303      	movs	r3, #3
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d2:	4619      	mov	r1, r3
 80029d4:	4810      	ldr	r0, [pc, #64]	; (8002a18 <MX_GPIO_Init+0x24c>)
 80029d6:	f7fd feed 	bl	80007b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD12 PD13 PD14 PD15 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80029da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029e0:	2303      	movs	r3, #3
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ec:	4619      	mov	r1, r3
 80029ee:	480b      	ldr	r0, [pc, #44]	; (8002a1c <MX_GPIO_Init+0x250>)
 80029f0:	f7fd fee0 	bl	80007b4 <HAL_GPIO_Init>

}
 80029f4:	bf00      	nop
 80029f6:	3738      	adds	r7, #56	; 0x38
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020000 	.word	0x40020000
 8002a04:	40020800 	.word	0x40020800
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40021400 	.word	0x40021400
 8002a10:	40021c00 	.word	0x40021c00
 8002a14:	40020400 	.word	0x40020400
 8002a18:	40021800 	.word	0x40021800
 8002a1c:	40020c00 	.word	0x40020c00

08002a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a44:	6453      	str	r3, [r2, #68]	; 0x44
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800

08002a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	; 0x28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a19      	ldr	r2, [pc, #100]	; (8002b04 <HAL_SPI_MspInit+0x84>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d12b      	bne.n	8002afa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_SPI_MspInit+0x88>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <HAL_SPI_MspInit+0x88>)
 8002aac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_SPI_MspInit+0x88>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_SPI_MspInit+0x88>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_SPI_MspInit+0x88>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_SPI_MspInit+0x88>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ada:	23f0      	movs	r3, #240	; 0xf0
 8002adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002aea:	2305      	movs	r3, #5
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	4619      	mov	r1, r3
 8002af4:	4805      	ldr	r0, [pc, #20]	; (8002b0c <HAL_SPI_MspInit+0x8c>)
 8002af6:	f7fd fe5d 	bl	80007b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002afa:	bf00      	nop
 8002afc:	3728      	adds	r7, #40	; 0x28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40013000 	.word	0x40013000
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40020000 	.word	0x40020000

08002b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <HAL_TIM_Base_MspInit+0x64>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d10e      	bne.n	8002b40 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_TIM_Base_MspInit+0x68>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <HAL_TIM_Base_MspInit+0x68>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6453      	str	r3, [r2, #68]	; 0x44
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_TIM_Base_MspInit+0x68>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002b3e:	e012      	b.n	8002b66 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0d      	ldr	r2, [pc, #52]	; (8002b7c <HAL_TIM_Base_MspInit+0x6c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10d      	bne.n	8002b66 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_TIM_Base_MspInit+0x68>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <HAL_TIM_Base_MspInit+0x68>)
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <HAL_TIM_Base_MspInit+0x68>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40010000 	.word	0x40010000
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40010400 	.word	0x40010400

08002b80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a25      	ldr	r2, [pc, #148]	; (8002c34 <HAL_TIM_MspPostInit+0xb4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d11f      	bne.n	8002be2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <HAL_TIM_MspPostInit+0xb8>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a23      	ldr	r2, [pc, #140]	; (8002c38 <HAL_TIM_MspPostInit+0xb8>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <HAL_TIM_MspPostInit+0xb8>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4818      	ldr	r0, [pc, #96]	; (8002c3c <HAL_TIM_MspPostInit+0xbc>)
 8002bdc:	f7fd fdea 	bl	80007b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002be0:	e023      	b.n	8002c2a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <HAL_TIM_MspPostInit+0xc0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d11e      	bne.n	8002c2a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <HAL_TIM_MspPostInit+0xb8>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <HAL_TIM_MspPostInit+0xb8>)
 8002bf6:	f043 0304 	orr.w	r3, r3, #4
 8002bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <HAL_TIM_MspPostInit+0xb8>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	4619      	mov	r1, r3
 8002c24:	4807      	ldr	r0, [pc, #28]	; (8002c44 <HAL_TIM_MspPostInit+0xc4>)
 8002c26:	f7fd fdc5 	bl	80007b4 <HAL_GPIO_Init>
}
 8002c2a:	bf00      	nop
 8002c2c:	3728      	adds	r7, #40	; 0x28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40010000 	.word	0x40010000
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40020000 	.word	0x40020000
 8002c40:	40010400 	.word	0x40010400
 8002c44:	40020800 	.word	0x40020800

08002c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08c      	sub	sp, #48	; 0x30
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 031c 	add.w	r3, r7, #28
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a32      	ldr	r2, [pc, #200]	; (8002d30 <HAL_UART_MspInit+0xe8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d12d      	bne.n	8002cc6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	4a30      	ldr	r2, [pc, #192]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002c74:	f043 0310 	orr.w	r3, r3, #16
 8002c78:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7a:	4b2e      	ldr	r3, [pc, #184]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	4b2a      	ldr	r3, [pc, #168]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a29      	ldr	r2, [pc, #164]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b27      	ldr	r3, [pc, #156]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ca2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cac:	2301      	movs	r3, #1
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cb4:	2307      	movs	r3, #7
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	481e      	ldr	r0, [pc, #120]	; (8002d38 <HAL_UART_MspInit+0xf0>)
 8002cc0:	f7fd fd78 	bl	80007b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cc4:	e030      	b.n	8002d28 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1c      	ldr	r2, [pc, #112]	; (8002d3c <HAL_UART_MspInit+0xf4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d12b      	bne.n	8002d28 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002cda:	f043 0320 	orr.w	r3, r3, #32
 8002cde:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	4a0f      	ldr	r2, [pc, #60]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <HAL_UART_MspInit+0xec>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d08:	23c0      	movs	r3, #192	; 0xc0
 8002d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d10:	2301      	movs	r3, #1
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d14:	2303      	movs	r3, #3
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d18:	2308      	movs	r3, #8
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d1c:	f107 031c 	add.w	r3, r7, #28
 8002d20:	4619      	mov	r1, r3
 8002d22:	4807      	ldr	r0, [pc, #28]	; (8002d40 <HAL_UART_MspInit+0xf8>)
 8002d24:	f7fd fd46 	bl	80007b4 <HAL_GPIO_Init>
}
 8002d28:	bf00      	nop
 8002d2a:	3730      	adds	r7, #48	; 0x30
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40011000 	.word	0x40011000
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40020000 	.word	0x40020000
 8002d3c:	40011400 	.word	0x40011400
 8002d40:	40020800 	.word	0x40020800

08002d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d56:	e7fe      	b.n	8002d56 <HardFault_Handler+0x4>

08002d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <MemManage_Handler+0x4>

08002d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <BusFault_Handler+0x4>

08002d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <UsageFault_Handler+0x4>

08002d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d98:	f7fd fc06 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002da4:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <SystemInit+0x60>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <SystemInit+0x60>)
 8002dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <SystemInit+0x64>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <SystemInit+0x64>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002dc0:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <SystemInit+0x64>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <SystemInit+0x64>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <SystemInit+0x64>)
 8002dcc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <SystemInit+0x64>)
 8002dd8:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <SystemInit+0x68>)
 8002dda:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <SystemInit+0x64>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a08      	ldr	r2, [pc, #32]	; (8002e04 <SystemInit+0x64>)
 8002de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <SystemInit+0x64>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <SystemInit+0x60>)
 8002df0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002df4:	609a      	str	r2, [r3, #8]
#endif
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000ed00 	.word	0xe000ed00
 8002e04:	40023800 	.word	0x40023800
 8002e08:	24003010 	.word	0x24003010

08002e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002e10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e12:	e003      	b.n	8002e1c <LoopCopyDataInit>

08002e14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e1a:	3104      	adds	r1, #4

08002e1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e1c:	480b      	ldr	r0, [pc, #44]	; (8002e4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e24:	d3f6      	bcc.n	8002e14 <CopyDataInit>
  ldr  r2, =_sbss
 8002e26:	4a0b      	ldr	r2, [pc, #44]	; (8002e54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e28:	e002      	b.n	8002e30 <LoopFillZerobss>

08002e2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002e2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e2c:	f842 3b04 	str.w	r3, [r2], #4

08002e30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e30:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e34:	d3f9      	bcc.n	8002e2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e36:	f7ff ffb3 	bl	8002da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e3a:	f000 f811 	bl	8002e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e3e:	f7ff fa89 	bl	8002354 <main>
  bx  lr    
 8002e42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e44:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8002e48:	08002ef8 	.word	0x08002ef8
  ldr  r0, =_sdata
 8002e4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e50:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002e54:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002e58:	20000184 	.word	0x20000184

08002e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e5c:	e7fe      	b.n	8002e5c <ADC_IRQHandler>
	...

08002e60 <__libc_init_array>:
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	4e0d      	ldr	r6, [pc, #52]	; (8002e98 <__libc_init_array+0x38>)
 8002e64:	4c0d      	ldr	r4, [pc, #52]	; (8002e9c <__libc_init_array+0x3c>)
 8002e66:	1ba4      	subs	r4, r4, r6
 8002e68:	10a4      	asrs	r4, r4, #2
 8002e6a:	2500      	movs	r5, #0
 8002e6c:	42a5      	cmp	r5, r4
 8002e6e:	d109      	bne.n	8002e84 <__libc_init_array+0x24>
 8002e70:	4e0b      	ldr	r6, [pc, #44]	; (8002ea0 <__libc_init_array+0x40>)
 8002e72:	4c0c      	ldr	r4, [pc, #48]	; (8002ea4 <__libc_init_array+0x44>)
 8002e74:	f000 f820 	bl	8002eb8 <_init>
 8002e78:	1ba4      	subs	r4, r4, r6
 8002e7a:	10a4      	asrs	r4, r4, #2
 8002e7c:	2500      	movs	r5, #0
 8002e7e:	42a5      	cmp	r5, r4
 8002e80:	d105      	bne.n	8002e8e <__libc_init_array+0x2e>
 8002e82:	bd70      	pop	{r4, r5, r6, pc}
 8002e84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e88:	4798      	blx	r3
 8002e8a:	3501      	adds	r5, #1
 8002e8c:	e7ee      	b.n	8002e6c <__libc_init_array+0xc>
 8002e8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e92:	4798      	blx	r3
 8002e94:	3501      	adds	r5, #1
 8002e96:	e7f2      	b.n	8002e7e <__libc_init_array+0x1e>
 8002e98:	08002ef0 	.word	0x08002ef0
 8002e9c:	08002ef0 	.word	0x08002ef0
 8002ea0:	08002ef0 	.word	0x08002ef0
 8002ea4:	08002ef4 	.word	0x08002ef4

08002ea8 <memset>:
 8002ea8:	4402      	add	r2, r0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <memset+0xa>
 8002eb0:	4770      	bx	lr
 8002eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb6:	e7f9      	b.n	8002eac <memset+0x4>

08002eb8 <_init>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	bf00      	nop
 8002ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ebe:	bc08      	pop	{r3}
 8002ec0:	469e      	mov	lr, r3
 8002ec2:	4770      	bx	lr

08002ec4 <_fini>:
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	bf00      	nop
 8002ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eca:	bc08      	pop	{r3}
 8002ecc:	469e      	mov	lr, r3
 8002ece:	4770      	bx	lr
